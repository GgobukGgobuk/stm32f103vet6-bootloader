
testbootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08002988  08002988  00012988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a84  08002a84  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002a84  08002a84  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a84  08002a84  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000074  08002b00  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002b00  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005594  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000140b  00000000  00000000  00025631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  00026a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000638  00000000  00000000  00027100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196cc  00000000  00000000  00027738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006fce  00000000  00000000  00040e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000917a3  00000000  00000000  00047dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9575  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002214  00000000  00000000  000d95c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08002970 	.word	0x08002970

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08002970 	.word	0x08002970

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800022a:	f000 fa63 	bl	80006f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022e:	f000 f829 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000232:	f000 f895 	bl	8000360 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000236:	f000 f869 	bl	800030c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Bootloader %d:%d Started!!", BL_Version[0], BL_Version[1]);
 800023a:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <main+0x54>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	4619      	mov	r1, r3
 8000240:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <main+0x54>)
 8000242:	785b      	ldrb	r3, [r3, #1]
 8000244:	461a      	mov	r2, r3
 8000246:	480d      	ldr	r0, [pc, #52]	; (800027c <main+0x58>)
 8000248:	f001 fb88 	bl	800195c <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t i = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	71fb      	strb	r3, [r7, #7]
  while (1)
  {

    for( i = 0; i< 20; i++)
 8000250:	2300      	movs	r3, #0
 8000252:	71fb      	strb	r3, [r7, #7]
 8000254:	e00a      	b.n	800026c <main+0x48>
    {
      HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800025a:	4809      	ldr	r0, [pc, #36]	; (8000280 <main+0x5c>)
 800025c:	f000 fd60 	bl	8000d20 <HAL_GPIO_TogglePin>
      HAL_Delay(100);
 8000260:	2064      	movs	r0, #100	; 0x64
 8000262:	f000 faa9 	bl	80007b8 <HAL_Delay>
    for( i = 0; i< 20; i++)
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	3301      	adds	r3, #1
 800026a:	71fb      	strb	r3, [r7, #7]
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	2b13      	cmp	r3, #19
 8000270:	d9f1      	bls.n	8000256 <main+0x32>
    }
    goto_application();
 8000272:	f000 f8c5 	bl	8000400 <goto_application>
    for( i = 0; i< 20; i++)
 8000276:	e7eb      	b.n	8000250 <main+0x2c>
 8000278:	20000000 	.word	0x20000000
 800027c:	08002988 	.word	0x08002988
 8000280:	40011400 	.word	0x40011400

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b090      	sub	sp, #64	; 0x40
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	2228      	movs	r2, #40	; 0x28
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 fb5a 	bl	800194c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002a6:	2301      	movs	r3, #1
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	2301      	movs	r3, #1
 80002b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b8:	2302      	movs	r3, #2
 80002ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002c2:	2300      	movs	r3, #0
 80002c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fd42 	bl	8000d54 <HAL_RCC_OscConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002d6:	f000 f8a7 	bl	8000428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	230f      	movs	r3, #15
 80002dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002de:	2302      	movs	r3, #2
 80002e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2100      	movs	r1, #0
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 ffb0 	bl	8001258 <HAL_RCC_ClockConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002fe:	f000 f893 	bl	8000428 <Error_Handler>
  }
}
 8000302:	bf00      	nop
 8000304:	3740      	adds	r7, #64	; 0x40
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000310:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000312:	4a12      	ldr	r2, [pc, #72]	; (800035c <MX_USART1_UART_Init+0x50>)
 8000314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000316:	4b10      	ldr	r3, [pc, #64]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800031c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000344:	f001 f920 	bl	8001588 <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034e:	f000 f86b 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000090 	.word	0x20000090
 800035c:	40013800 	.word	0x40013800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000374:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <MX_GPIO_Init+0x74>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a16      	ldr	r2, [pc, #88]	; (80003d4 <MX_GPIO_Init+0x74>)
 800037a:	f043 0304 	orr.w	r3, r3, #4
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_GPIO_Init+0x74>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0304 	and.w	r3, r3, #4
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038c:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <MX_GPIO_Init+0x74>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a10      	ldr	r2, [pc, #64]	; (80003d4 <MX_GPIO_Init+0x74>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <MX_GPIO_Init+0x74>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0320 	and.w	r3, r3, #32
 80003a0:	603b      	str	r3, [r7, #0]
 80003a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2110      	movs	r1, #16
 80003a8:	480b      	ldr	r0, [pc, #44]	; (80003d8 <MX_GPIO_Init+0x78>)
 80003aa:	f000 fca1 	bl	8000cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80003ae:	2310      	movs	r3, #16
 80003b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2302      	movs	r3, #2
 80003bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003be:	f107 0308 	add.w	r3, r7, #8
 80003c2:	4619      	mov	r1, r3
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <MX_GPIO_Init+0x78>)
 80003c6:	f000 faff 	bl	80009c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ca:	bf00      	nop
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40011400 	.word	0x40011400

080003dc <__io_putchar>:
   
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__*/
  {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */

    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80003e4:	1d39      	adds	r1, r7, #4
 80003e6:	f04f 33ff 	mov.w	r3, #4294967295
 80003ea:	2201      	movs	r2, #1
 80003ec:	4803      	ldr	r0, [pc, #12]	; (80003fc <__io_putchar+0x20>)
 80003ee:	f001 f918 	bl	8001622 <HAL_UART_Transmit>
   return ch;
 80003f2:	687b      	ldr	r3, [r7, #4]

  }
 80003f4:	4618      	mov	r0, r3
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000090 	.word	0x20000090

08000400 <goto_application>:

  static void goto_application(void)
  {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
    printf("Gonna Jump to Application...\n");
 8000406:	4806      	ldr	r0, [pc, #24]	; (8000420 <goto_application+0x20>)
 8000408:	f001 fb2e 	bl	8001a68 <puts>
    void (*app_reset_handler) (void) = (void*)(*((volatile uint32_t*) (0x8004400 +4U)));
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <goto_application+0x24>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	607b      	str	r3, [r7, #4]

    app_reset_handler();
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4798      	blx	r3
  }
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	080029a4 	.word	0x080029a4
 8000424:	08004404 	.word	0x08004404

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000430:	e7fe      	b.n	8000430 <Error_Handler+0x8>
	...

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <HAL_MspInit+0x40>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <HAL_MspInit+0x40>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_MspInit+0x40>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <HAL_MspInit+0x40>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a07      	ldr	r2, [pc, #28]	; (8000474 <HAL_MspInit+0x40>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <HAL_MspInit+0x40>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000

08000478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b088      	sub	sp, #32
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <HAL_UART_MspInit+0x8c>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d131      	bne.n	80004fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <HAL_UART_MspInit+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a1a      	ldr	r2, [pc, #104]	; (8000508 <HAL_UART_MspInit+0x90>)
 800049e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ac:	60fb      	str	r3, [r7, #12]
 80004ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b15      	ldr	r3, [pc, #84]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a14      	ldr	r2, [pc, #80]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <HAL_UART_MspInit+0x90>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ce:	2302      	movs	r3, #2
 80004d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d2:	2303      	movs	r3, #3
 80004d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	4619      	mov	r1, r3
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <HAL_UART_MspInit+0x94>)
 80004de:	f000 fa73 	bl	80009c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	4619      	mov	r1, r3
 80004f6:	4805      	ldr	r0, [pc, #20]	; (800050c <HAL_UART_MspInit+0x94>)
 80004f8:	f000 fa66 	bl	80009c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004fc:	bf00      	nop
 80004fe:	3720      	adds	r7, #32
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40013800 	.word	0x40013800
 8000508:	40021000 	.word	0x40021000
 800050c:	40010800 	.word	0x40010800

08000510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <NMI_Handler+0x4>

08000516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800051a:	e7fe      	b.n	800051a <HardFault_Handler+0x4>

0800051c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <MemManage_Handler+0x4>

08000522 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <BusFault_Handler+0x4>

08000528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <UsageFault_Handler+0x4>

0800052e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000556:	f000 f913 	bl	8000780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}

0800055e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b086      	sub	sp, #24
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	e00a      	b.n	8000586 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000570:	f3af 8000 	nop.w
 8000574:	4601      	mov	r1, r0
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	1c5a      	adds	r2, r3, #1
 800057a:	60ba      	str	r2, [r7, #8]
 800057c:	b2ca      	uxtb	r2, r1
 800057e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	3301      	adds	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	697a      	ldr	r2, [r7, #20]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	429a      	cmp	r2, r3
 800058c:	dbf0      	blt.n	8000570 <_read+0x12>
  }

  return len;
 800058e:	687b      	ldr	r3, [r7, #4]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	e009      	b.n	80005be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	1c5a      	adds	r2, r3, #1
 80005ae:	60ba      	str	r2, [r7, #8]
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff12 	bl	80003dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	3301      	adds	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	697a      	ldr	r2, [r7, #20]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	dbf1      	blt.n	80005aa <_write+0x12>
  }
  return len;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <_close>:

int _close(int file)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005f6:	605a      	str	r2, [r3, #4]
  return 0;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <_isatty>:

int _isatty(int file)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800060c:	2301      	movs	r3, #1
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <_sbrk+0x5c>)
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <_sbrk+0x60>)
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <_sbrk+0x64>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d102      	bne.n	8000652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <_sbrk+0x64>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <_sbrk+0x68>)
 8000650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <_sbrk+0x64>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	429a      	cmp	r2, r3
 800065e:	d207      	bcs.n	8000670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000660:	f001 f94a 	bl	80018f8 <__errno>
 8000664:	4603      	mov	r3, r0
 8000666:	220c      	movs	r2, #12
 8000668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	e009      	b.n	8000684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <_sbrk+0x64>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4413      	add	r3, r2
 800067e:	4a05      	ldr	r2, [pc, #20]	; (8000694 <_sbrk+0x64>)
 8000680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000682:	68fb      	ldr	r3, [r7, #12]
}
 8000684:	4618      	mov	r0, r3
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20010000 	.word	0x20010000
 8000690:	00000400 	.word	0x00000400
 8000694:	200000d4 	.word	0x200000d4
 8000698:	200000f0 	.word	0x200000f0

0800069c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480c      	ldr	r0, [pc, #48]	; (80006dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006aa:	490d      	ldr	r1, [pc, #52]	; (80006e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006ac:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006c0:	4c0a      	ldr	r4, [pc, #40]	; (80006ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ce:	f7ff ffe5 	bl	800069c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006d2:	f001 f917 	bl	8001904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fda5 	bl	8000224 <main>
  bx lr
 80006da:	4770      	bx	lr
  ldr r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80006e4:	08002a8c 	.word	0x08002a8c
  ldr r2, =_sbss
 80006e8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80006ec:	200000ec 	.word	0x200000ec

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>
	...

080006f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_Init+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a07      	ldr	r2, [pc, #28]	; (800071c <HAL_Init+0x28>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000704:	2003      	movs	r0, #3
 8000706:	f000 f92b 	bl	8000960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800070a:	200f      	movs	r0, #15
 800070c:	f000 f808 	bl	8000720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000710:	f7ff fe90 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_InitTick+0x54>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_InitTick+0x58>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000736:	fbb3 f3f1 	udiv	r3, r3, r1
 800073a:	fbb2 f3f3 	udiv	r3, r2, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f935 	bl	80009ae <HAL_SYSTICK_Config>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e00e      	b.n	800076c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b0f      	cmp	r3, #15
 8000752:	d80a      	bhi.n	800076a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000754:	2200      	movs	r2, #0
 8000756:	6879      	ldr	r1, [r7, #4]
 8000758:	f04f 30ff 	mov.w	r0, #4294967295
 800075c:	f000 f90b 	bl	8000976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000760:	4a06      	ldr	r2, [pc, #24]	; (800077c <HAL_InitTick+0x5c>)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	e000      	b.n	800076c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
}
 800076c:	4618      	mov	r0, r3
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000004 	.word	0x20000004
 8000778:	2000000c 	.word	0x2000000c
 800077c:	20000008 	.word	0x20000008

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x1c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x20>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <HAL_IncTick+0x20>)
 8000792:	6013      	str	r3, [r2, #0]
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	200000d8 	.word	0x200000d8

080007a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b02      	ldr	r3, [pc, #8]	; (80007b4 <HAL_GetTick+0x10>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	200000d8 	.word	0x200000d8

080007b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c0:	f7ff fff0 	bl	80007a4 <HAL_GetTick>
 80007c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d0:	d005      	beq.n	80007de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_Delay+0x44>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	461a      	mov	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	4413      	add	r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007de:	bf00      	nop
 80007e0:	f7ff ffe0 	bl	80007a4 <HAL_GetTick>
 80007e4:	4602      	mov	r2, r0
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d8f7      	bhi.n	80007e0 <HAL_Delay+0x28>
  {
  }
}
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	2000000c 	.word	0x2000000c

08000800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db0a      	blt.n	800088e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	b2da      	uxtb	r2, r3
 800087c:	490c      	ldr	r1, [pc, #48]	; (80008b0 <__NVIC_SetPriority+0x4c>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	b2d2      	uxtb	r2, r2
 8000886:	440b      	add	r3, r1
 8000888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800088c:	e00a      	b.n	80008a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4908      	ldr	r1, [pc, #32]	; (80008b4 <__NVIC_SetPriority+0x50>)
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 030f 	and.w	r3, r3, #15
 800089a:	3b04      	subs	r3, #4
 800089c:	0112      	lsls	r2, r2, #4
 800089e:	b2d2      	uxtb	r2, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	761a      	strb	r2, [r3, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b089      	sub	sp, #36	; 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f1c3 0307 	rsb	r3, r3, #7
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	bf28      	it	cs
 80008d6:	2304      	movcs	r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	3304      	adds	r3, #4
 80008de:	2b06      	cmp	r3, #6
 80008e0:	d902      	bls.n	80008e8 <NVIC_EncodePriority+0x30>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3b03      	subs	r3, #3
 80008e6:	e000      	b.n	80008ea <NVIC_EncodePriority+0x32>
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ec:	f04f 32ff 	mov.w	r2, #4294967295
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	401a      	ands	r2, r3
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000900:	f04f 31ff 	mov.w	r1, #4294967295
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa01 f303 	lsl.w	r3, r1, r3
 800090a:	43d9      	mvns	r1, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000910:	4313      	orrs	r3, r2
         );
}
 8000912:	4618      	mov	r0, r3
 8000914:	3724      	adds	r7, #36	; 0x24
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800092c:	d301      	bcc.n	8000932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092e:	2301      	movs	r3, #1
 8000930:	e00f      	b.n	8000952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <SysTick_Config+0x40>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093a:	210f      	movs	r1, #15
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f7ff ff90 	bl	8000864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <SysTick_Config+0x40>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <SysTick_Config+0x40>)
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	e000e010 	.word	0xe000e010

08000960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ff49 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000976:	b580      	push	{r7, lr}
 8000978:	b086      	sub	sp, #24
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	60b9      	str	r1, [r7, #8]
 8000980:	607a      	str	r2, [r7, #4]
 8000982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000988:	f7ff ff5e 	bl	8000848 <__NVIC_GetPriorityGrouping>
 800098c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	6978      	ldr	r0, [r7, #20]
 8000994:	f7ff ff90 	bl	80008b8 <NVIC_EncodePriority>
 8000998:	4602      	mov	r2, r0
 800099a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff5f 	bl	8000864 <__NVIC_SetPriority>
}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ffb0 	bl	800091c <SysTick_Config>
 80009bc:	4603      	mov	r3, r0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b08b      	sub	sp, #44	; 0x2c
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009da:	e179      	b.n	8000cd0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009dc:	2201      	movs	r2, #1
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	69fa      	ldr	r2, [r7, #28]
 80009ec:	4013      	ands	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	f040 8168 	bne.w	8000cca <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	4a96      	ldr	r2, [pc, #600]	; (8000c58 <HAL_GPIO_Init+0x290>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d05e      	beq.n	8000ac2 <HAL_GPIO_Init+0xfa>
 8000a04:	4a94      	ldr	r2, [pc, #592]	; (8000c58 <HAL_GPIO_Init+0x290>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d875      	bhi.n	8000af6 <HAL_GPIO_Init+0x12e>
 8000a0a:	4a94      	ldr	r2, [pc, #592]	; (8000c5c <HAL_GPIO_Init+0x294>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d058      	beq.n	8000ac2 <HAL_GPIO_Init+0xfa>
 8000a10:	4a92      	ldr	r2, [pc, #584]	; (8000c5c <HAL_GPIO_Init+0x294>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d86f      	bhi.n	8000af6 <HAL_GPIO_Init+0x12e>
 8000a16:	4a92      	ldr	r2, [pc, #584]	; (8000c60 <HAL_GPIO_Init+0x298>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d052      	beq.n	8000ac2 <HAL_GPIO_Init+0xfa>
 8000a1c:	4a90      	ldr	r2, [pc, #576]	; (8000c60 <HAL_GPIO_Init+0x298>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d869      	bhi.n	8000af6 <HAL_GPIO_Init+0x12e>
 8000a22:	4a90      	ldr	r2, [pc, #576]	; (8000c64 <HAL_GPIO_Init+0x29c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d04c      	beq.n	8000ac2 <HAL_GPIO_Init+0xfa>
 8000a28:	4a8e      	ldr	r2, [pc, #568]	; (8000c64 <HAL_GPIO_Init+0x29c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d863      	bhi.n	8000af6 <HAL_GPIO_Init+0x12e>
 8000a2e:	4a8e      	ldr	r2, [pc, #568]	; (8000c68 <HAL_GPIO_Init+0x2a0>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d046      	beq.n	8000ac2 <HAL_GPIO_Init+0xfa>
 8000a34:	4a8c      	ldr	r2, [pc, #560]	; (8000c68 <HAL_GPIO_Init+0x2a0>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d85d      	bhi.n	8000af6 <HAL_GPIO_Init+0x12e>
 8000a3a:	2b12      	cmp	r3, #18
 8000a3c:	d82a      	bhi.n	8000a94 <HAL_GPIO_Init+0xcc>
 8000a3e:	2b12      	cmp	r3, #18
 8000a40:	d859      	bhi.n	8000af6 <HAL_GPIO_Init+0x12e>
 8000a42:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <HAL_GPIO_Init+0x80>)
 8000a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a48:	08000ac3 	.word	0x08000ac3
 8000a4c:	08000a9d 	.word	0x08000a9d
 8000a50:	08000aaf 	.word	0x08000aaf
 8000a54:	08000af1 	.word	0x08000af1
 8000a58:	08000af7 	.word	0x08000af7
 8000a5c:	08000af7 	.word	0x08000af7
 8000a60:	08000af7 	.word	0x08000af7
 8000a64:	08000af7 	.word	0x08000af7
 8000a68:	08000af7 	.word	0x08000af7
 8000a6c:	08000af7 	.word	0x08000af7
 8000a70:	08000af7 	.word	0x08000af7
 8000a74:	08000af7 	.word	0x08000af7
 8000a78:	08000af7 	.word	0x08000af7
 8000a7c:	08000af7 	.word	0x08000af7
 8000a80:	08000af7 	.word	0x08000af7
 8000a84:	08000af7 	.word	0x08000af7
 8000a88:	08000af7 	.word	0x08000af7
 8000a8c:	08000aa5 	.word	0x08000aa5
 8000a90:	08000ab9 	.word	0x08000ab9
 8000a94:	4a75      	ldr	r2, [pc, #468]	; (8000c6c <HAL_GPIO_Init+0x2a4>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d013      	beq.n	8000ac2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a9a:	e02c      	b.n	8000af6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	623b      	str	r3, [r7, #32]
          break;
 8000aa2:	e029      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	623b      	str	r3, [r7, #32]
          break;
 8000aac:	e024      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	3308      	adds	r3, #8
 8000ab4:	623b      	str	r3, [r7, #32]
          break;
 8000ab6:	e01f      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	330c      	adds	r3, #12
 8000abe:	623b      	str	r3, [r7, #32]
          break;
 8000ac0:	e01a      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d102      	bne.n	8000ad0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aca:	2304      	movs	r3, #4
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e013      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d105      	bne.n	8000ae4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	611a      	str	r2, [r3, #16]
          break;
 8000ae2:	e009      	b.n	8000af8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae4:	2308      	movs	r3, #8
 8000ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	615a      	str	r2, [r3, #20]
          break;
 8000aee:	e003      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
          break;
 8000af4:	e000      	b.n	8000af8 <HAL_GPIO_Init+0x130>
          break;
 8000af6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	2bff      	cmp	r3, #255	; 0xff
 8000afc:	d801      	bhi.n	8000b02 <HAL_GPIO_Init+0x13a>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	e001      	b.n	8000b06 <HAL_GPIO_Init+0x13e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3304      	adds	r3, #4
 8000b06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	2bff      	cmp	r3, #255	; 0xff
 8000b0c:	d802      	bhi.n	8000b14 <HAL_GPIO_Init+0x14c>
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	e002      	b.n	8000b1a <HAL_GPIO_Init+0x152>
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	3b08      	subs	r3, #8
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	210f      	movs	r1, #15
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	6a39      	ldr	r1, [r7, #32]
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	fa01 f303 	lsl.w	r3, r1, r3
 8000b34:	431a      	orrs	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 80c1 	beq.w	8000cca <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b48:	4b49      	ldr	r3, [pc, #292]	; (8000c70 <HAL_GPIO_Init+0x2a8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a48      	ldr	r2, [pc, #288]	; (8000c70 <HAL_GPIO_Init+0x2a8>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b46      	ldr	r3, [pc, #280]	; (8000c70 <HAL_GPIO_Init+0x2a8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b60:	4a44      	ldr	r2, [pc, #272]	; (8000c74 <HAL_GPIO_Init+0x2ac>)
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	089b      	lsrs	r3, r3, #2
 8000b66:	3302      	adds	r3, #2
 8000b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	220f      	movs	r2, #15
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a3c      	ldr	r2, [pc, #240]	; (8000c78 <HAL_GPIO_Init+0x2b0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d01f      	beq.n	8000bcc <HAL_GPIO_Init+0x204>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a3b      	ldr	r2, [pc, #236]	; (8000c7c <HAL_GPIO_Init+0x2b4>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d019      	beq.n	8000bc8 <HAL_GPIO_Init+0x200>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a3a      	ldr	r2, [pc, #232]	; (8000c80 <HAL_GPIO_Init+0x2b8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d013      	beq.n	8000bc4 <HAL_GPIO_Init+0x1fc>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a39      	ldr	r2, [pc, #228]	; (8000c84 <HAL_GPIO_Init+0x2bc>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d00d      	beq.n	8000bc0 <HAL_GPIO_Init+0x1f8>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a38      	ldr	r2, [pc, #224]	; (8000c88 <HAL_GPIO_Init+0x2c0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d007      	beq.n	8000bbc <HAL_GPIO_Init+0x1f4>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a37      	ldr	r2, [pc, #220]	; (8000c8c <HAL_GPIO_Init+0x2c4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d101      	bne.n	8000bb8 <HAL_GPIO_Init+0x1f0>
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	e00a      	b.n	8000bce <HAL_GPIO_Init+0x206>
 8000bb8:	2306      	movs	r3, #6
 8000bba:	e008      	b.n	8000bce <HAL_GPIO_Init+0x206>
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	e006      	b.n	8000bce <HAL_GPIO_Init+0x206>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	e004      	b.n	8000bce <HAL_GPIO_Init+0x206>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	e002      	b.n	8000bce <HAL_GPIO_Init+0x206>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e000      	b.n	8000bce <HAL_GPIO_Init+0x206>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bd0:	f002 0203 	and.w	r2, r2, #3
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	4093      	lsls	r3, r2
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bde:	4925      	ldr	r1, [pc, #148]	; (8000c74 <HAL_GPIO_Init+0x2ac>)
 8000be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	3302      	adds	r3, #2
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <HAL_GPIO_Init+0x2c8>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4924      	ldr	r1, [pc, #144]	; (8000c90 <HAL_GPIO_Init+0x2c8>)
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	600b      	str	r3, [r1, #0]
 8000c04:	e006      	b.n	8000c14 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c06:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <HAL_GPIO_Init+0x2c8>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	4920      	ldr	r1, [pc, #128]	; (8000c90 <HAL_GPIO_Init+0x2c8>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <HAL_GPIO_Init+0x2c8>)
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	491a      	ldr	r1, [pc, #104]	; (8000c90 <HAL_GPIO_Init+0x2c8>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	604b      	str	r3, [r1, #4]
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_GPIO_Init+0x2c8>)
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	4916      	ldr	r1, [pc, #88]	; (8000c90 <HAL_GPIO_Init+0x2c8>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d025      	beq.n	8000c94 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_GPIO_Init+0x2c8>)
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	4910      	ldr	r1, [pc, #64]	; (8000c90 <HAL_GPIO_Init+0x2c8>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	608b      	str	r3, [r1, #8]
 8000c54:	e025      	b.n	8000ca2 <HAL_GPIO_Init+0x2da>
 8000c56:	bf00      	nop
 8000c58:	10320000 	.word	0x10320000
 8000c5c:	10310000 	.word	0x10310000
 8000c60:	10220000 	.word	0x10220000
 8000c64:	10210000 	.word	0x10210000
 8000c68:	10120000 	.word	0x10120000
 8000c6c:	10110000 	.word	0x10110000
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40010c00 	.word	0x40010c00
 8000c80:	40011000 	.word	0x40011000
 8000c84:	40011400 	.word	0x40011400
 8000c88:	40011800 	.word	0x40011800
 8000c8c:	40011c00 	.word	0x40011c00
 8000c90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_GPIO_Init+0x324>)
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	4913      	ldr	r1, [pc, #76]	; (8000cec <HAL_GPIO_Init+0x324>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d006      	beq.n	8000cbc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_GPIO_Init+0x324>)
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	490e      	ldr	r1, [pc, #56]	; (8000cec <HAL_GPIO_Init+0x324>)
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60cb      	str	r3, [r1, #12]
 8000cba:	e006      	b.n	8000cca <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_GPIO_Init+0x324>)
 8000cbe:	68da      	ldr	r2, [r3, #12]
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	4909      	ldr	r1, [pc, #36]	; (8000cec <HAL_GPIO_Init+0x324>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	3301      	adds	r3, #1
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f47f ae7e 	bne.w	80009dc <HAL_GPIO_Init+0x14>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	bf00      	nop
 8000ce4:	372c      	adds	r7, #44	; 0x2c
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	40010400 	.word	0x40010400

08000cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d00:	787b      	ldrb	r3, [r7, #1]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d0c:	e003      	b.n	8000d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d0e:	887b      	ldrh	r3, [r7, #2]
 8000d10:	041a      	lsls	r2, r3, #16
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	611a      	str	r2, [r3, #16]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr

08000d20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d32:	887a      	ldrh	r2, [r7, #2]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4013      	ands	r3, r2
 8000d38:	041a      	lsls	r2, r3, #16
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43d9      	mvns	r1, r3
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	400b      	ands	r3, r1
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	611a      	str	r2, [r3, #16]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
	...

08000d54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e272      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8087 	beq.w	8000e82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d74:	4b92      	ldr	r3, [pc, #584]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d00c      	beq.n	8000d9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d80:	4b8f      	ldr	r3, [pc, #572]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d112      	bne.n	8000db2 <HAL_RCC_OscConfig+0x5e>
 8000d8c:	4b8c      	ldr	r3, [pc, #560]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d98:	d10b      	bne.n	8000db2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9a:	4b89      	ldr	r3, [pc, #548]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d06c      	beq.n	8000e80 <HAL_RCC_OscConfig+0x12c>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d168      	bne.n	8000e80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e24c      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dba:	d106      	bne.n	8000dca <HAL_RCC_OscConfig+0x76>
 8000dbc:	4b80      	ldr	r3, [pc, #512]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a7f      	ldr	r2, [pc, #508]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	e02e      	b.n	8000e28 <HAL_RCC_OscConfig+0xd4>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10c      	bne.n	8000dec <HAL_RCC_OscConfig+0x98>
 8000dd2:	4b7b      	ldr	r3, [pc, #492]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a7a      	ldr	r2, [pc, #488]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	4b78      	ldr	r3, [pc, #480]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a77      	ldr	r2, [pc, #476]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e01d      	b.n	8000e28 <HAL_RCC_OscConfig+0xd4>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df4:	d10c      	bne.n	8000e10 <HAL_RCC_OscConfig+0xbc>
 8000df6:	4b72      	ldr	r3, [pc, #456]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a71      	ldr	r2, [pc, #452]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	4b6f      	ldr	r3, [pc, #444]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a6e      	ldr	r2, [pc, #440]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	e00b      	b.n	8000e28 <HAL_RCC_OscConfig+0xd4>
 8000e10:	4b6b      	ldr	r3, [pc, #428]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a6a      	ldr	r2, [pc, #424]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	4b68      	ldr	r3, [pc, #416]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a67      	ldr	r2, [pc, #412]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d013      	beq.n	8000e58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e30:	f7ff fcb8 	bl	80007a4 <HAL_GetTick>
 8000e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e36:	e008      	b.n	8000e4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fcb4 	bl	80007a4 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b64      	cmp	r3, #100	; 0x64
 8000e44:	d901      	bls.n	8000e4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e200      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	4b5d      	ldr	r3, [pc, #372]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0f0      	beq.n	8000e38 <HAL_RCC_OscConfig+0xe4>
 8000e56:	e014      	b.n	8000e82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fca4 	bl	80007a4 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fca0 	bl	80007a4 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e1ec      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e72:	4b53      	ldr	r3, [pc, #332]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d1f0      	bne.n	8000e60 <HAL_RCC_OscConfig+0x10c>
 8000e7e:	e000      	b.n	8000e82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d063      	beq.n	8000f56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e8e:	4b4c      	ldr	r3, [pc, #304]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 030c 	and.w	r3, r3, #12
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00b      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e9a:	4b49      	ldr	r3, [pc, #292]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 030c 	and.w	r3, r3, #12
 8000ea2:	2b08      	cmp	r3, #8
 8000ea4:	d11c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x18c>
 8000ea6:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d116      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb2:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d005      	beq.n	8000eca <HAL_RCC_OscConfig+0x176>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d001      	beq.n	8000eca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e1c0      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eca:	4b3d      	ldr	r3, [pc, #244]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4939      	ldr	r1, [pc, #228]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ede:	e03a      	b.n	8000f56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d020      	beq.n	8000f2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee8:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eee:	f7ff fc59 	bl	80007a4 <HAL_GetTick>
 8000ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef4:	e008      	b.n	8000f08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef6:	f7ff fc55 	bl	80007a4 <HAL_GetTick>
 8000efa:	4602      	mov	r2, r0
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	1ad3      	subs	r3, r2, r3
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d901      	bls.n	8000f08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f04:	2303      	movs	r3, #3
 8000f06:	e1a1      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f0      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4927      	ldr	r1, [pc, #156]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
 8000f28:	e015      	b.n	8000f56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f2a:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <HAL_RCC_OscConfig+0x270>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f30:	f7ff fc38 	bl	80007a4 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fc34 	bl	80007a4 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e180      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f0      	bne.n	8000f38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d03a      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d019      	beq.n	8000f9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_RCC_OscConfig+0x274>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f70:	f7ff fc18 	bl	80007a4 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f78:	f7ff fc14 	bl	80007a4 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e160      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f0      	beq.n	8000f78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f96:	2001      	movs	r0, #1
 8000f98:	f000 fad8 	bl	800154c <RCC_Delay>
 8000f9c:	e01c      	b.n	8000fd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_RCC_OscConfig+0x274>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa4:	f7ff fbfe 	bl	80007a4 <HAL_GetTick>
 8000fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000faa:	e00f      	b.n	8000fcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fac:	f7ff fbfa 	bl	80007a4 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d908      	bls.n	8000fcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e146      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
 8000fbe:	bf00      	nop
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	42420000 	.word	0x42420000
 8000fc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fcc:	4b92      	ldr	r3, [pc, #584]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1e9      	bne.n	8000fac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80a6 	beq.w	8001132 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fea:	4b8b      	ldr	r3, [pc, #556]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10d      	bne.n	8001012 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b88      	ldr	r3, [pc, #544]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a87      	ldr	r2, [pc, #540]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b85      	ldr	r3, [pc, #532]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100e:	2301      	movs	r3, #1
 8001010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001012:	4b82      	ldr	r3, [pc, #520]	; (800121c <HAL_RCC_OscConfig+0x4c8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	2b00      	cmp	r3, #0
 800101c:	d118      	bne.n	8001050 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101e:	4b7f      	ldr	r3, [pc, #508]	; (800121c <HAL_RCC_OscConfig+0x4c8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a7e      	ldr	r2, [pc, #504]	; (800121c <HAL_RCC_OscConfig+0x4c8>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800102a:	f7ff fbbb 	bl	80007a4 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001032:	f7ff fbb7 	bl	80007a4 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b64      	cmp	r3, #100	; 0x64
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e103      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001044:	4b75      	ldr	r3, [pc, #468]	; (800121c <HAL_RCC_OscConfig+0x4c8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d106      	bne.n	8001066 <HAL_RCC_OscConfig+0x312>
 8001058:	4b6f      	ldr	r3, [pc, #444]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4a6e      	ldr	r2, [pc, #440]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6213      	str	r3, [r2, #32]
 8001064:	e02d      	b.n	80010c2 <HAL_RCC_OscConfig+0x36e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x334>
 800106e:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	4a69      	ldr	r2, [pc, #420]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	6213      	str	r3, [r2, #32]
 800107a:	4b67      	ldr	r3, [pc, #412]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	6a1b      	ldr	r3, [r3, #32]
 800107e:	4a66      	ldr	r2, [pc, #408]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	f023 0304 	bic.w	r3, r3, #4
 8001084:	6213      	str	r3, [r2, #32]
 8001086:	e01c      	b.n	80010c2 <HAL_RCC_OscConfig+0x36e>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b05      	cmp	r3, #5
 800108e:	d10c      	bne.n	80010aa <HAL_RCC_OscConfig+0x356>
 8001090:	4b61      	ldr	r3, [pc, #388]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4a60      	ldr	r2, [pc, #384]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	6213      	str	r3, [r2, #32]
 800109c:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	4a5d      	ldr	r2, [pc, #372]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6213      	str	r3, [r2, #32]
 80010a8:	e00b      	b.n	80010c2 <HAL_RCC_OscConfig+0x36e>
 80010aa:	4b5b      	ldr	r3, [pc, #364]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	4a5a      	ldr	r2, [pc, #360]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	f023 0301 	bic.w	r3, r3, #1
 80010b4:	6213      	str	r3, [r2, #32]
 80010b6:	4b58      	ldr	r3, [pc, #352]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	4a57      	ldr	r2, [pc, #348]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	f023 0304 	bic.w	r3, r3, #4
 80010c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d015      	beq.n	80010f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ca:	f7ff fb6b 	bl	80007a4 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d0:	e00a      	b.n	80010e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d2:	f7ff fb67 	bl	80007a4 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e0b1      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e8:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0ee      	beq.n	80010d2 <HAL_RCC_OscConfig+0x37e>
 80010f4:	e014      	b.n	8001120 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f6:	f7ff fb55 	bl	80007a4 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010fc:	e00a      	b.n	8001114 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fe:	f7ff fb51 	bl	80007a4 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	f241 3288 	movw	r2, #5000	; 0x1388
 800110c:	4293      	cmp	r3, r2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e09b      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001114:	4b40      	ldr	r3, [pc, #256]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1ee      	bne.n	80010fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d105      	bne.n	8001132 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001126:	4b3c      	ldr	r3, [pc, #240]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	4a3b      	ldr	r2, [pc, #236]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 800112c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001130:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8087 	beq.w	800124a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800113c:	4b36      	ldr	r3, [pc, #216]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 030c 	and.w	r3, r3, #12
 8001144:	2b08      	cmp	r3, #8
 8001146:	d061      	beq.n	800120c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d146      	bne.n	80011de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001150:	4b33      	ldr	r3, [pc, #204]	; (8001220 <HAL_RCC_OscConfig+0x4cc>)
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001156:	f7ff fb25 	bl	80007a4 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115e:	f7ff fb21 	bl	80007a4 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e06d      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f0      	bne.n	800115e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001184:	d108      	bne.n	8001198 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	4921      	ldr	r1, [pc, #132]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	4313      	orrs	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a19      	ldr	r1, [r3, #32]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	430b      	orrs	r3, r1
 80011aa:	491b      	ldr	r1, [pc, #108]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_RCC_OscConfig+0x4cc>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b6:	f7ff faf5 	bl	80007a4 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011be:	f7ff faf1 	bl	80007a4 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e03d      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x46a>
 80011dc:	e035      	b.n	800124a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_RCC_OscConfig+0x4cc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fade 	bl	80007a4 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ec:	f7ff fada 	bl	80007a4 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e026      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_RCC_OscConfig+0x4c4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0x498>
 800120a:	e01e      	b.n	800124a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d107      	bne.n	8001224 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e019      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
 8001218:	40021000 	.word	0x40021000
 800121c:	40007000 	.word	0x40007000
 8001220:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_RCC_OscConfig+0x500>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	429a      	cmp	r2, r3
 8001236:	d106      	bne.n	8001246 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001242:	429a      	cmp	r2, r3
 8001244:	d001      	beq.n	800124a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0d0      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800126c:	4b6a      	ldr	r3, [pc, #424]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d910      	bls.n	800129c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127a:	4b67      	ldr	r3, [pc, #412]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 0207 	bic.w	r2, r3, #7
 8001282:	4965      	ldr	r1, [pc, #404]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128a:	4b63      	ldr	r3, [pc, #396]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d001      	beq.n	800129c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e0b8      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d020      	beq.n	80012ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b4:	4b59      	ldr	r3, [pc, #356]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4a58      	ldr	r2, [pc, #352]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012cc:	4b53      	ldr	r3, [pc, #332]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4a52      	ldr	r2, [pc, #328]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d8:	4b50      	ldr	r3, [pc, #320]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	494d      	ldr	r1, [pc, #308]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d040      	beq.n	8001378 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d107      	bne.n	800130e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	4b47      	ldr	r3, [pc, #284]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d115      	bne.n	8001336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e07f      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d107      	bne.n	8001326 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001316:	4b41      	ldr	r3, [pc, #260]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d109      	bne.n	8001336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e073      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001326:	4b3d      	ldr	r3, [pc, #244]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e06b      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001336:	4b39      	ldr	r3, [pc, #228]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f023 0203 	bic.w	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4936      	ldr	r1, [pc, #216]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001348:	f7ff fa2c 	bl	80007a4 <HAL_GetTick>
 800134c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134e:	e00a      	b.n	8001366 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001350:	f7ff fa28 	bl	80007a4 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	f241 3288 	movw	r2, #5000	; 0x1388
 800135e:	4293      	cmp	r3, r2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e053      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 020c 	and.w	r2, r3, #12
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	429a      	cmp	r2, r3
 8001376:	d1eb      	bne.n	8001350 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d210      	bcs.n	80013a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001386:	4b24      	ldr	r3, [pc, #144]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 0207 	bic.w	r2, r3, #7
 800138e:	4922      	ldr	r1, [pc, #136]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001396:	4b20      	ldr	r3, [pc, #128]	; (8001418 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e032      	b.n	800140e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4916      	ldr	r1, [pc, #88]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	490e      	ldr	r1, [pc, #56]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013e6:	f000 f821 	bl	800142c <HAL_RCC_GetSysClockFreq>
 80013ea:	4602      	mov	r2, r0
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	490a      	ldr	r1, [pc, #40]	; (8001420 <HAL_RCC_ClockConfig+0x1c8>)
 80013f8:	5ccb      	ldrb	r3, [r1, r3]
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	4a09      	ldr	r2, [pc, #36]	; (8001424 <HAL_RCC_ClockConfig+0x1cc>)
 8001400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_RCC_ClockConfig+0x1d0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f98a 	bl	8000720 <HAL_InitTick>

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40022000 	.word	0x40022000
 800141c:	40021000 	.word	0x40021000
 8001420:	080029d4 	.word	0x080029d4
 8001424:	20000004 	.word	0x20000004
 8001428:	20000008 	.word	0x20000008

0800142c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800142c:	b490      	push	{r4, r7}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001434:	1d3c      	adds	r4, r7, #4
 8001436:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001438:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800143c:	f240 2301 	movw	r3, #513	; 0x201
 8001440:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 030c 	and.w	r3, r3, #12
 8001462:	2b04      	cmp	r3, #4
 8001464:	d002      	beq.n	800146c <HAL_RCC_GetSysClockFreq+0x40>
 8001466:	2b08      	cmp	r3, #8
 8001468:	d003      	beq.n	8001472 <HAL_RCC_GetSysClockFreq+0x46>
 800146a:	e02b      	b.n	80014c4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800146e:	623b      	str	r3, [r7, #32]
      break;
 8001470:	e02b      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	0c9b      	lsrs	r3, r3, #18
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3328      	adds	r3, #40	; 0x28
 800147c:	443b      	add	r3, r7
 800147e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001482:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d012      	beq.n	80014b4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	0c5b      	lsrs	r3, r3, #17
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	3328      	adds	r3, #40	; 0x28
 800149a:	443b      	add	r3, r7
 800149c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014a6:	fb03 f202 	mul.w	r2, r3, r2
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
 80014b2:	e004      	b.n	80014be <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014b8:	fb02 f303 	mul.w	r3, r2, r3
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	623b      	str	r3, [r7, #32]
      break;
 80014c2:	e002      	b.n	80014ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014c6:	623b      	str	r3, [r7, #32]
      break;
 80014c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ca:	6a3b      	ldr	r3, [r7, #32]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc90      	pop	{r4, r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	080029c4 	.word	0x080029c4
 80014dc:	40021000 	.word	0x40021000
 80014e0:	007a1200 	.word	0x007a1200
 80014e4:	003d0900 	.word	0x003d0900

080014e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014ec:	4b02      	ldr	r3, [pc, #8]	; (80014f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	20000004 	.word	0x20000004

080014fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001500:	f7ff fff2 	bl	80014e8 <HAL_RCC_GetHCLKFreq>
 8001504:	4602      	mov	r2, r0
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	4903      	ldr	r1, [pc, #12]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001512:	5ccb      	ldrb	r3, [r1, r3]
 8001514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021000 	.word	0x40021000
 8001520:	080029e4 	.word	0x080029e4

08001524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001528:	f7ff ffde 	bl	80014e8 <HAL_RCC_GetHCLKFreq>
 800152c:	4602      	mov	r2, r0
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	0adb      	lsrs	r3, r3, #11
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	4903      	ldr	r1, [pc, #12]	; (8001548 <HAL_RCC_GetPCLK2Freq+0x24>)
 800153a:	5ccb      	ldrb	r3, [r1, r3]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	080029e4 	.word	0x080029e4

0800154c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <RCC_Delay+0x34>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <RCC_Delay+0x38>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0a5b      	lsrs	r3, r3, #9
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001568:	bf00      	nop
  }
  while (Delay --);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1e5a      	subs	r2, r3, #1
 800156e:	60fa      	str	r2, [r7, #12]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f9      	bne.n	8001568 <RCC_Delay+0x1c>
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr
 8001580:	20000004 	.word	0x20000004
 8001584:	10624dd3 	.word	0x10624dd3

08001588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e03f      	b.n	800161a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d106      	bne.n	80015b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7fe ff62 	bl	8000478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2224      	movs	r2, #36	; 0x24
 80015b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f905 	bl	80017dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80015f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2220      	movs	r2, #32
 800160c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2220      	movs	r2, #32
 8001614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b08a      	sub	sp, #40	; 0x28
 8001626:	af02      	add	r7, sp, #8
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	4613      	mov	r3, r2
 8001630:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b20      	cmp	r3, #32
 8001640:	d17c      	bne.n	800173c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d002      	beq.n	800164e <HAL_UART_Transmit+0x2c>
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e075      	b.n	800173e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <HAL_UART_Transmit+0x3e>
 800165c:	2302      	movs	r3, #2
 800165e:	e06e      	b.n	800173e <HAL_UART_Transmit+0x11c>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2221      	movs	r2, #33	; 0x21
 8001672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001676:	f7ff f895 	bl	80007a4 <HAL_GetTick>
 800167a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	88fa      	ldrh	r2, [r7, #6]
 8001680:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001690:	d108      	bne.n	80016a4 <HAL_UART_Transmit+0x82>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d104      	bne.n	80016a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	e003      	b.n	80016ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80016b4:	e02a      	b.n	800170c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2200      	movs	r2, #0
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f840 	bl	8001746 <UART_WaitOnFlagUntilTimeout>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e036      	b.n	800173e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10b      	bne.n	80016ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	3302      	adds	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	e007      	b.n	80016fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	781a      	ldrb	r2, [r3, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	3301      	adds	r3, #1
 80016fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001710:	b29b      	uxth	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1cf      	bne.n	80016b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2200      	movs	r2, #0
 800171e:	2140      	movs	r1, #64	; 0x40
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f810 	bl	8001746 <UART_WaitOnFlagUntilTimeout>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e006      	b.n	800173e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2220      	movs	r2, #32
 8001734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	e000      	b.n	800173e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800173c:	2302      	movs	r3, #2
  }
}
 800173e:	4618      	mov	r0, r3
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b084      	sub	sp, #16
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4613      	mov	r3, r2
 8001754:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001756:	e02c      	b.n	80017b2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800175e:	d028      	beq.n	80017b2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <UART_WaitOnFlagUntilTimeout+0x30>
 8001766:	f7ff f81d 	bl	80007a4 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	429a      	cmp	r2, r3
 8001774:	d21d      	bcs.n	80017b2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001784:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2220      	movs	r2, #32
 80017a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e00f      	b.n	80017d2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4013      	ands	r3, r2
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	429a      	cmp	r2, r3
 80017c0:	bf0c      	ite	eq
 80017c2:	2301      	moveq	r3, #1
 80017c4:	2300      	movne	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d0c3      	beq.n	8001758 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	4313      	orrs	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001816:	f023 030c 	bic.w	r3, r3, #12
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	430b      	orrs	r3, r1
 8001822:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a2c      	ldr	r2, [pc, #176]	; (80018f0 <UART_SetConfig+0x114>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d103      	bne.n	800184c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001844:	f7ff fe6e 	bl	8001524 <HAL_RCC_GetPCLK2Freq>
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	e002      	b.n	8001852 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800184c:	f7ff fe56 	bl	80014fc <HAL_RCC_GetPCLK1Freq>
 8001850:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	009a      	lsls	r2, r3, #2
 800185c:	441a      	add	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	fbb2 f3f3 	udiv	r3, r2, r3
 8001868:	4a22      	ldr	r2, [pc, #136]	; (80018f4 <UART_SetConfig+0x118>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	0119      	lsls	r1, r3, #4
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	009a      	lsls	r2, r3, #2
 800187c:	441a      	add	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	fbb2 f2f3 	udiv	r2, r2, r3
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <UART_SetConfig+0x118>)
 800188a:	fba3 0302 	umull	r0, r3, r3, r2
 800188e:	095b      	lsrs	r3, r3, #5
 8001890:	2064      	movs	r0, #100	; 0x64
 8001892:	fb00 f303 	mul.w	r3, r0, r3
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	011b      	lsls	r3, r3, #4
 800189a:	3332      	adds	r3, #50	; 0x32
 800189c:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <UART_SetConfig+0x118>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018a8:	4419      	add	r1, r3
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009a      	lsls	r2, r3, #2
 80018b4:	441a      	add	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <UART_SetConfig+0x118>)
 80018c2:	fba3 0302 	umull	r0, r3, r3, r2
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2064      	movs	r0, #100	; 0x64
 80018ca:	fb00 f303 	mul.w	r3, r0, r3
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	3332      	adds	r3, #50	; 0x32
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <UART_SetConfig+0x118>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	f003 020f 	and.w	r2, r3, #15
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	440a      	add	r2, r1
 80018e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40013800 	.word	0x40013800
 80018f4:	51eb851f 	.word	0x51eb851f

080018f8 <__errno>:
 80018f8:	4b01      	ldr	r3, [pc, #4]	; (8001900 <__errno+0x8>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000010 	.word	0x20000010

08001904 <__libc_init_array>:
 8001904:	b570      	push	{r4, r5, r6, lr}
 8001906:	2600      	movs	r6, #0
 8001908:	4d0c      	ldr	r5, [pc, #48]	; (800193c <__libc_init_array+0x38>)
 800190a:	4c0d      	ldr	r4, [pc, #52]	; (8001940 <__libc_init_array+0x3c>)
 800190c:	1b64      	subs	r4, r4, r5
 800190e:	10a4      	asrs	r4, r4, #2
 8001910:	42a6      	cmp	r6, r4
 8001912:	d109      	bne.n	8001928 <__libc_init_array+0x24>
 8001914:	f001 f82c 	bl	8002970 <_init>
 8001918:	2600      	movs	r6, #0
 800191a:	4d0a      	ldr	r5, [pc, #40]	; (8001944 <__libc_init_array+0x40>)
 800191c:	4c0a      	ldr	r4, [pc, #40]	; (8001948 <__libc_init_array+0x44>)
 800191e:	1b64      	subs	r4, r4, r5
 8001920:	10a4      	asrs	r4, r4, #2
 8001922:	42a6      	cmp	r6, r4
 8001924:	d105      	bne.n	8001932 <__libc_init_array+0x2e>
 8001926:	bd70      	pop	{r4, r5, r6, pc}
 8001928:	f855 3b04 	ldr.w	r3, [r5], #4
 800192c:	4798      	blx	r3
 800192e:	3601      	adds	r6, #1
 8001930:	e7ee      	b.n	8001910 <__libc_init_array+0xc>
 8001932:	f855 3b04 	ldr.w	r3, [r5], #4
 8001936:	4798      	blx	r3
 8001938:	3601      	adds	r6, #1
 800193a:	e7f2      	b.n	8001922 <__libc_init_array+0x1e>
 800193c:	08002a84 	.word	0x08002a84
 8001940:	08002a84 	.word	0x08002a84
 8001944:	08002a84 	.word	0x08002a84
 8001948:	08002a88 	.word	0x08002a88

0800194c <memset>:
 800194c:	4603      	mov	r3, r0
 800194e:	4402      	add	r2, r0
 8001950:	4293      	cmp	r3, r2
 8001952:	d100      	bne.n	8001956 <memset+0xa>
 8001954:	4770      	bx	lr
 8001956:	f803 1b01 	strb.w	r1, [r3], #1
 800195a:	e7f9      	b.n	8001950 <memset+0x4>

0800195c <iprintf>:
 800195c:	b40f      	push	{r0, r1, r2, r3}
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <iprintf+0x2c>)
 8001960:	b513      	push	{r0, r1, r4, lr}
 8001962:	681c      	ldr	r4, [r3, #0]
 8001964:	b124      	cbz	r4, 8001970 <iprintf+0x14>
 8001966:	69a3      	ldr	r3, [r4, #24]
 8001968:	b913      	cbnz	r3, 8001970 <iprintf+0x14>
 800196a:	4620      	mov	r0, r4
 800196c:	f000 fa5a 	bl	8001e24 <__sinit>
 8001970:	ab05      	add	r3, sp, #20
 8001972:	4620      	mov	r0, r4
 8001974:	9a04      	ldr	r2, [sp, #16]
 8001976:	68a1      	ldr	r1, [r4, #8]
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	f000 fc5d 	bl	8002238 <_vfiprintf_r>
 800197e:	b002      	add	sp, #8
 8001980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001984:	b004      	add	sp, #16
 8001986:	4770      	bx	lr
 8001988:	20000010 	.word	0x20000010

0800198c <_puts_r>:
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	460e      	mov	r6, r1
 8001990:	4605      	mov	r5, r0
 8001992:	b118      	cbz	r0, 800199c <_puts_r+0x10>
 8001994:	6983      	ldr	r3, [r0, #24]
 8001996:	b90b      	cbnz	r3, 800199c <_puts_r+0x10>
 8001998:	f000 fa44 	bl	8001e24 <__sinit>
 800199c:	69ab      	ldr	r3, [r5, #24]
 800199e:	68ac      	ldr	r4, [r5, #8]
 80019a0:	b913      	cbnz	r3, 80019a8 <_puts_r+0x1c>
 80019a2:	4628      	mov	r0, r5
 80019a4:	f000 fa3e 	bl	8001e24 <__sinit>
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <_puts_r+0xd0>)
 80019aa:	429c      	cmp	r4, r3
 80019ac:	d120      	bne.n	80019f0 <_puts_r+0x64>
 80019ae:	686c      	ldr	r4, [r5, #4]
 80019b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019b2:	07db      	lsls	r3, r3, #31
 80019b4:	d405      	bmi.n	80019c2 <_puts_r+0x36>
 80019b6:	89a3      	ldrh	r3, [r4, #12]
 80019b8:	0598      	lsls	r0, r3, #22
 80019ba:	d402      	bmi.n	80019c2 <_puts_r+0x36>
 80019bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019be:	f000 facf 	bl	8001f60 <__retarget_lock_acquire_recursive>
 80019c2:	89a3      	ldrh	r3, [r4, #12]
 80019c4:	0719      	lsls	r1, r3, #28
 80019c6:	d51d      	bpl.n	8001a04 <_puts_r+0x78>
 80019c8:	6923      	ldr	r3, [r4, #16]
 80019ca:	b1db      	cbz	r3, 8001a04 <_puts_r+0x78>
 80019cc:	3e01      	subs	r6, #1
 80019ce:	68a3      	ldr	r3, [r4, #8]
 80019d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60a3      	str	r3, [r4, #8]
 80019d8:	bb39      	cbnz	r1, 8001a2a <_puts_r+0x9e>
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da38      	bge.n	8001a50 <_puts_r+0xc4>
 80019de:	4622      	mov	r2, r4
 80019e0:	210a      	movs	r1, #10
 80019e2:	4628      	mov	r0, r5
 80019e4:	f000 f848 	bl	8001a78 <__swbuf_r>
 80019e8:	3001      	adds	r0, #1
 80019ea:	d011      	beq.n	8001a10 <_puts_r+0x84>
 80019ec:	250a      	movs	r5, #10
 80019ee:	e011      	b.n	8001a14 <_puts_r+0x88>
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <_puts_r+0xd4>)
 80019f2:	429c      	cmp	r4, r3
 80019f4:	d101      	bne.n	80019fa <_puts_r+0x6e>
 80019f6:	68ac      	ldr	r4, [r5, #8]
 80019f8:	e7da      	b.n	80019b0 <_puts_r+0x24>
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <_puts_r+0xd8>)
 80019fc:	429c      	cmp	r4, r3
 80019fe:	bf08      	it	eq
 8001a00:	68ec      	ldreq	r4, [r5, #12]
 8001a02:	e7d5      	b.n	80019b0 <_puts_r+0x24>
 8001a04:	4621      	mov	r1, r4
 8001a06:	4628      	mov	r0, r5
 8001a08:	f000 f888 	bl	8001b1c <__swsetup_r>
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	d0dd      	beq.n	80019cc <_puts_r+0x40>
 8001a10:	f04f 35ff 	mov.w	r5, #4294967295
 8001a14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a16:	07da      	lsls	r2, r3, #31
 8001a18:	d405      	bmi.n	8001a26 <_puts_r+0x9a>
 8001a1a:	89a3      	ldrh	r3, [r4, #12]
 8001a1c:	059b      	lsls	r3, r3, #22
 8001a1e:	d402      	bmi.n	8001a26 <_puts_r+0x9a>
 8001a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a22:	f000 fa9e 	bl	8001f62 <__retarget_lock_release_recursive>
 8001a26:	4628      	mov	r0, r5
 8001a28:	bd70      	pop	{r4, r5, r6, pc}
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da04      	bge.n	8001a38 <_puts_r+0xac>
 8001a2e:	69a2      	ldr	r2, [r4, #24]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dc06      	bgt.n	8001a42 <_puts_r+0xb6>
 8001a34:	290a      	cmp	r1, #10
 8001a36:	d004      	beq.n	8001a42 <_puts_r+0xb6>
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	6022      	str	r2, [r4, #0]
 8001a3e:	7019      	strb	r1, [r3, #0]
 8001a40:	e7c5      	b.n	80019ce <_puts_r+0x42>
 8001a42:	4622      	mov	r2, r4
 8001a44:	4628      	mov	r0, r5
 8001a46:	f000 f817 	bl	8001a78 <__swbuf_r>
 8001a4a:	3001      	adds	r0, #1
 8001a4c:	d1bf      	bne.n	80019ce <_puts_r+0x42>
 8001a4e:	e7df      	b.n	8001a10 <_puts_r+0x84>
 8001a50:	250a      	movs	r5, #10
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	6022      	str	r2, [r4, #0]
 8001a58:	701d      	strb	r5, [r3, #0]
 8001a5a:	e7db      	b.n	8001a14 <_puts_r+0x88>
 8001a5c:	08002a10 	.word	0x08002a10
 8001a60:	08002a30 	.word	0x08002a30
 8001a64:	080029f0 	.word	0x080029f0

08001a68 <puts>:
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <puts+0xc>)
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	f7ff bf8d 	b.w	800198c <_puts_r>
 8001a72:	bf00      	nop
 8001a74:	20000010 	.word	0x20000010

08001a78 <__swbuf_r>:
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7a:	460e      	mov	r6, r1
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	4605      	mov	r5, r0
 8001a80:	b118      	cbz	r0, 8001a8a <__swbuf_r+0x12>
 8001a82:	6983      	ldr	r3, [r0, #24]
 8001a84:	b90b      	cbnz	r3, 8001a8a <__swbuf_r+0x12>
 8001a86:	f000 f9cd 	bl	8001e24 <__sinit>
 8001a8a:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <__swbuf_r+0x98>)
 8001a8c:	429c      	cmp	r4, r3
 8001a8e:	d12b      	bne.n	8001ae8 <__swbuf_r+0x70>
 8001a90:	686c      	ldr	r4, [r5, #4]
 8001a92:	69a3      	ldr	r3, [r4, #24]
 8001a94:	60a3      	str	r3, [r4, #8]
 8001a96:	89a3      	ldrh	r3, [r4, #12]
 8001a98:	071a      	lsls	r2, r3, #28
 8001a9a:	d52f      	bpl.n	8001afc <__swbuf_r+0x84>
 8001a9c:	6923      	ldr	r3, [r4, #16]
 8001a9e:	b36b      	cbz	r3, 8001afc <__swbuf_r+0x84>
 8001aa0:	6923      	ldr	r3, [r4, #16]
 8001aa2:	6820      	ldr	r0, [r4, #0]
 8001aa4:	b2f6      	uxtb	r6, r6
 8001aa6:	1ac0      	subs	r0, r0, r3
 8001aa8:	6963      	ldr	r3, [r4, #20]
 8001aaa:	4637      	mov	r7, r6
 8001aac:	4283      	cmp	r3, r0
 8001aae:	dc04      	bgt.n	8001aba <__swbuf_r+0x42>
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	f000 f922 	bl	8001cfc <_fflush_r>
 8001ab8:	bb30      	cbnz	r0, 8001b08 <__swbuf_r+0x90>
 8001aba:	68a3      	ldr	r3, [r4, #8]
 8001abc:	3001      	adds	r0, #1
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	60a3      	str	r3, [r4, #8]
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	6022      	str	r2, [r4, #0]
 8001ac8:	701e      	strb	r6, [r3, #0]
 8001aca:	6963      	ldr	r3, [r4, #20]
 8001acc:	4283      	cmp	r3, r0
 8001ace:	d004      	beq.n	8001ada <__swbuf_r+0x62>
 8001ad0:	89a3      	ldrh	r3, [r4, #12]
 8001ad2:	07db      	lsls	r3, r3, #31
 8001ad4:	d506      	bpl.n	8001ae4 <__swbuf_r+0x6c>
 8001ad6:	2e0a      	cmp	r6, #10
 8001ad8:	d104      	bne.n	8001ae4 <__swbuf_r+0x6c>
 8001ada:	4621      	mov	r1, r4
 8001adc:	4628      	mov	r0, r5
 8001ade:	f000 f90d 	bl	8001cfc <_fflush_r>
 8001ae2:	b988      	cbnz	r0, 8001b08 <__swbuf_r+0x90>
 8001ae4:	4638      	mov	r0, r7
 8001ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <__swbuf_r+0x9c>)
 8001aea:	429c      	cmp	r4, r3
 8001aec:	d101      	bne.n	8001af2 <__swbuf_r+0x7a>
 8001aee:	68ac      	ldr	r4, [r5, #8]
 8001af0:	e7cf      	b.n	8001a92 <__swbuf_r+0x1a>
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <__swbuf_r+0xa0>)
 8001af4:	429c      	cmp	r4, r3
 8001af6:	bf08      	it	eq
 8001af8:	68ec      	ldreq	r4, [r5, #12]
 8001afa:	e7ca      	b.n	8001a92 <__swbuf_r+0x1a>
 8001afc:	4621      	mov	r1, r4
 8001afe:	4628      	mov	r0, r5
 8001b00:	f000 f80c 	bl	8001b1c <__swsetup_r>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	d0cb      	beq.n	8001aa0 <__swbuf_r+0x28>
 8001b08:	f04f 37ff 	mov.w	r7, #4294967295
 8001b0c:	e7ea      	b.n	8001ae4 <__swbuf_r+0x6c>
 8001b0e:	bf00      	nop
 8001b10:	08002a10 	.word	0x08002a10
 8001b14:	08002a30 	.word	0x08002a30
 8001b18:	080029f0 	.word	0x080029f0

08001b1c <__swsetup_r>:
 8001b1c:	4b32      	ldr	r3, [pc, #200]	; (8001be8 <__swsetup_r+0xcc>)
 8001b1e:	b570      	push	{r4, r5, r6, lr}
 8001b20:	681d      	ldr	r5, [r3, #0]
 8001b22:	4606      	mov	r6, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	b125      	cbz	r5, 8001b32 <__swsetup_r+0x16>
 8001b28:	69ab      	ldr	r3, [r5, #24]
 8001b2a:	b913      	cbnz	r3, 8001b32 <__swsetup_r+0x16>
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f000 f979 	bl	8001e24 <__sinit>
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <__swsetup_r+0xd0>)
 8001b34:	429c      	cmp	r4, r3
 8001b36:	d10f      	bne.n	8001b58 <__swsetup_r+0x3c>
 8001b38:	686c      	ldr	r4, [r5, #4]
 8001b3a:	89a3      	ldrh	r3, [r4, #12]
 8001b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b40:	0719      	lsls	r1, r3, #28
 8001b42:	d42c      	bmi.n	8001b9e <__swsetup_r+0x82>
 8001b44:	06dd      	lsls	r5, r3, #27
 8001b46:	d411      	bmi.n	8001b6c <__swsetup_r+0x50>
 8001b48:	2309      	movs	r3, #9
 8001b4a:	6033      	str	r3, [r6, #0]
 8001b4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	81a3      	strh	r3, [r4, #12]
 8001b56:	e03e      	b.n	8001bd6 <__swsetup_r+0xba>
 8001b58:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <__swsetup_r+0xd4>)
 8001b5a:	429c      	cmp	r4, r3
 8001b5c:	d101      	bne.n	8001b62 <__swsetup_r+0x46>
 8001b5e:	68ac      	ldr	r4, [r5, #8]
 8001b60:	e7eb      	b.n	8001b3a <__swsetup_r+0x1e>
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <__swsetup_r+0xd8>)
 8001b64:	429c      	cmp	r4, r3
 8001b66:	bf08      	it	eq
 8001b68:	68ec      	ldreq	r4, [r5, #12]
 8001b6a:	e7e6      	b.n	8001b3a <__swsetup_r+0x1e>
 8001b6c:	0758      	lsls	r0, r3, #29
 8001b6e:	d512      	bpl.n	8001b96 <__swsetup_r+0x7a>
 8001b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b72:	b141      	cbz	r1, 8001b86 <__swsetup_r+0x6a>
 8001b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b78:	4299      	cmp	r1, r3
 8001b7a:	d002      	beq.n	8001b82 <__swsetup_r+0x66>
 8001b7c:	4630      	mov	r0, r6
 8001b7e:	f000 fa57 	bl	8002030 <_free_r>
 8001b82:	2300      	movs	r3, #0
 8001b84:	6363      	str	r3, [r4, #52]	; 0x34
 8001b86:	89a3      	ldrh	r3, [r4, #12]
 8001b88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b8c:	81a3      	strh	r3, [r4, #12]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	6063      	str	r3, [r4, #4]
 8001b92:	6923      	ldr	r3, [r4, #16]
 8001b94:	6023      	str	r3, [r4, #0]
 8001b96:	89a3      	ldrh	r3, [r4, #12]
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	81a3      	strh	r3, [r4, #12]
 8001b9e:	6923      	ldr	r3, [r4, #16]
 8001ba0:	b94b      	cbnz	r3, 8001bb6 <__swsetup_r+0x9a>
 8001ba2:	89a3      	ldrh	r3, [r4, #12]
 8001ba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bac:	d003      	beq.n	8001bb6 <__swsetup_r+0x9a>
 8001bae:	4621      	mov	r1, r4
 8001bb0:	4630      	mov	r0, r6
 8001bb2:	f000 f9fd 	bl	8001fb0 <__smakebuf_r>
 8001bb6:	89a0      	ldrh	r0, [r4, #12]
 8001bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bbc:	f010 0301 	ands.w	r3, r0, #1
 8001bc0:	d00a      	beq.n	8001bd8 <__swsetup_r+0xbc>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60a3      	str	r3, [r4, #8]
 8001bc6:	6963      	ldr	r3, [r4, #20]
 8001bc8:	425b      	negs	r3, r3
 8001bca:	61a3      	str	r3, [r4, #24]
 8001bcc:	6923      	ldr	r3, [r4, #16]
 8001bce:	b943      	cbnz	r3, 8001be2 <__swsetup_r+0xc6>
 8001bd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001bd4:	d1ba      	bne.n	8001b4c <__swsetup_r+0x30>
 8001bd6:	bd70      	pop	{r4, r5, r6, pc}
 8001bd8:	0781      	lsls	r1, r0, #30
 8001bda:	bf58      	it	pl
 8001bdc:	6963      	ldrpl	r3, [r4, #20]
 8001bde:	60a3      	str	r3, [r4, #8]
 8001be0:	e7f4      	b.n	8001bcc <__swsetup_r+0xb0>
 8001be2:	2000      	movs	r0, #0
 8001be4:	e7f7      	b.n	8001bd6 <__swsetup_r+0xba>
 8001be6:	bf00      	nop
 8001be8:	20000010 	.word	0x20000010
 8001bec:	08002a10 	.word	0x08002a10
 8001bf0:	08002a30 	.word	0x08002a30
 8001bf4:	080029f0 	.word	0x080029f0

08001bf8 <__sflush_r>:
 8001bf8:	898a      	ldrh	r2, [r1, #12]
 8001bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bfc:	4605      	mov	r5, r0
 8001bfe:	0710      	lsls	r0, r2, #28
 8001c00:	460c      	mov	r4, r1
 8001c02:	d457      	bmi.n	8001cb4 <__sflush_r+0xbc>
 8001c04:	684b      	ldr	r3, [r1, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	dc04      	bgt.n	8001c14 <__sflush_r+0x1c>
 8001c0a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	dc01      	bgt.n	8001c14 <__sflush_r+0x1c>
 8001c10:	2000      	movs	r0, #0
 8001c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c16:	2e00      	cmp	r6, #0
 8001c18:	d0fa      	beq.n	8001c10 <__sflush_r+0x18>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c20:	682f      	ldr	r7, [r5, #0]
 8001c22:	602b      	str	r3, [r5, #0]
 8001c24:	d032      	beq.n	8001c8c <__sflush_r+0x94>
 8001c26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c28:	89a3      	ldrh	r3, [r4, #12]
 8001c2a:	075a      	lsls	r2, r3, #29
 8001c2c:	d505      	bpl.n	8001c3a <__sflush_r+0x42>
 8001c2e:	6863      	ldr	r3, [r4, #4]
 8001c30:	1ac0      	subs	r0, r0, r3
 8001c32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c34:	b10b      	cbz	r3, 8001c3a <__sflush_r+0x42>
 8001c36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c38:	1ac0      	subs	r0, r0, r3
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c40:	4628      	mov	r0, r5
 8001c42:	6a21      	ldr	r1, [r4, #32]
 8001c44:	47b0      	blx	r6
 8001c46:	1c43      	adds	r3, r0, #1
 8001c48:	89a3      	ldrh	r3, [r4, #12]
 8001c4a:	d106      	bne.n	8001c5a <__sflush_r+0x62>
 8001c4c:	6829      	ldr	r1, [r5, #0]
 8001c4e:	291d      	cmp	r1, #29
 8001c50:	d82c      	bhi.n	8001cac <__sflush_r+0xb4>
 8001c52:	4a29      	ldr	r2, [pc, #164]	; (8001cf8 <__sflush_r+0x100>)
 8001c54:	40ca      	lsrs	r2, r1
 8001c56:	07d6      	lsls	r6, r2, #31
 8001c58:	d528      	bpl.n	8001cac <__sflush_r+0xb4>
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	6062      	str	r2, [r4, #4]
 8001c5e:	6922      	ldr	r2, [r4, #16]
 8001c60:	04d9      	lsls	r1, r3, #19
 8001c62:	6022      	str	r2, [r4, #0]
 8001c64:	d504      	bpl.n	8001c70 <__sflush_r+0x78>
 8001c66:	1c42      	adds	r2, r0, #1
 8001c68:	d101      	bne.n	8001c6e <__sflush_r+0x76>
 8001c6a:	682b      	ldr	r3, [r5, #0]
 8001c6c:	b903      	cbnz	r3, 8001c70 <__sflush_r+0x78>
 8001c6e:	6560      	str	r0, [r4, #84]	; 0x54
 8001c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c72:	602f      	str	r7, [r5, #0]
 8001c74:	2900      	cmp	r1, #0
 8001c76:	d0cb      	beq.n	8001c10 <__sflush_r+0x18>
 8001c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c7c:	4299      	cmp	r1, r3
 8001c7e:	d002      	beq.n	8001c86 <__sflush_r+0x8e>
 8001c80:	4628      	mov	r0, r5
 8001c82:	f000 f9d5 	bl	8002030 <_free_r>
 8001c86:	2000      	movs	r0, #0
 8001c88:	6360      	str	r0, [r4, #52]	; 0x34
 8001c8a:	e7c2      	b.n	8001c12 <__sflush_r+0x1a>
 8001c8c:	6a21      	ldr	r1, [r4, #32]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	4628      	mov	r0, r5
 8001c92:	47b0      	blx	r6
 8001c94:	1c41      	adds	r1, r0, #1
 8001c96:	d1c7      	bne.n	8001c28 <__sflush_r+0x30>
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0c4      	beq.n	8001c28 <__sflush_r+0x30>
 8001c9e:	2b1d      	cmp	r3, #29
 8001ca0:	d001      	beq.n	8001ca6 <__sflush_r+0xae>
 8001ca2:	2b16      	cmp	r3, #22
 8001ca4:	d101      	bne.n	8001caa <__sflush_r+0xb2>
 8001ca6:	602f      	str	r7, [r5, #0]
 8001ca8:	e7b2      	b.n	8001c10 <__sflush_r+0x18>
 8001caa:	89a3      	ldrh	r3, [r4, #12]
 8001cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb0:	81a3      	strh	r3, [r4, #12]
 8001cb2:	e7ae      	b.n	8001c12 <__sflush_r+0x1a>
 8001cb4:	690f      	ldr	r7, [r1, #16]
 8001cb6:	2f00      	cmp	r7, #0
 8001cb8:	d0aa      	beq.n	8001c10 <__sflush_r+0x18>
 8001cba:	0793      	lsls	r3, r2, #30
 8001cbc:	bf18      	it	ne
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	680e      	ldr	r6, [r1, #0]
 8001cc2:	bf08      	it	eq
 8001cc4:	694b      	ldreq	r3, [r1, #20]
 8001cc6:	1bf6      	subs	r6, r6, r7
 8001cc8:	600f      	str	r7, [r1, #0]
 8001cca:	608b      	str	r3, [r1, #8]
 8001ccc:	2e00      	cmp	r6, #0
 8001cce:	dd9f      	ble.n	8001c10 <__sflush_r+0x18>
 8001cd0:	4633      	mov	r3, r6
 8001cd2:	463a      	mov	r2, r7
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	6a21      	ldr	r1, [r4, #32]
 8001cd8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001cdc:	47e0      	blx	ip
 8001cde:	2800      	cmp	r0, #0
 8001ce0:	dc06      	bgt.n	8001cf0 <__sflush_r+0xf8>
 8001ce2:	89a3      	ldrh	r3, [r4, #12]
 8001ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cec:	81a3      	strh	r3, [r4, #12]
 8001cee:	e790      	b.n	8001c12 <__sflush_r+0x1a>
 8001cf0:	4407      	add	r7, r0
 8001cf2:	1a36      	subs	r6, r6, r0
 8001cf4:	e7ea      	b.n	8001ccc <__sflush_r+0xd4>
 8001cf6:	bf00      	nop
 8001cf8:	20400001 	.word	0x20400001

08001cfc <_fflush_r>:
 8001cfc:	b538      	push	{r3, r4, r5, lr}
 8001cfe:	690b      	ldr	r3, [r1, #16]
 8001d00:	4605      	mov	r5, r0
 8001d02:	460c      	mov	r4, r1
 8001d04:	b913      	cbnz	r3, 8001d0c <_fflush_r+0x10>
 8001d06:	2500      	movs	r5, #0
 8001d08:	4628      	mov	r0, r5
 8001d0a:	bd38      	pop	{r3, r4, r5, pc}
 8001d0c:	b118      	cbz	r0, 8001d16 <_fflush_r+0x1a>
 8001d0e:	6983      	ldr	r3, [r0, #24]
 8001d10:	b90b      	cbnz	r3, 8001d16 <_fflush_r+0x1a>
 8001d12:	f000 f887 	bl	8001e24 <__sinit>
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <_fflush_r+0x6c>)
 8001d18:	429c      	cmp	r4, r3
 8001d1a:	d11b      	bne.n	8001d54 <_fflush_r+0x58>
 8001d1c:	686c      	ldr	r4, [r5, #4]
 8001d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0ef      	beq.n	8001d06 <_fflush_r+0xa>
 8001d26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d28:	07d0      	lsls	r0, r2, #31
 8001d2a:	d404      	bmi.n	8001d36 <_fflush_r+0x3a>
 8001d2c:	0599      	lsls	r1, r3, #22
 8001d2e:	d402      	bmi.n	8001d36 <_fflush_r+0x3a>
 8001d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d32:	f000 f915 	bl	8001f60 <__retarget_lock_acquire_recursive>
 8001d36:	4628      	mov	r0, r5
 8001d38:	4621      	mov	r1, r4
 8001d3a:	f7ff ff5d 	bl	8001bf8 <__sflush_r>
 8001d3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d40:	4605      	mov	r5, r0
 8001d42:	07da      	lsls	r2, r3, #31
 8001d44:	d4e0      	bmi.n	8001d08 <_fflush_r+0xc>
 8001d46:	89a3      	ldrh	r3, [r4, #12]
 8001d48:	059b      	lsls	r3, r3, #22
 8001d4a:	d4dd      	bmi.n	8001d08 <_fflush_r+0xc>
 8001d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d4e:	f000 f908 	bl	8001f62 <__retarget_lock_release_recursive>
 8001d52:	e7d9      	b.n	8001d08 <_fflush_r+0xc>
 8001d54:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <_fflush_r+0x70>)
 8001d56:	429c      	cmp	r4, r3
 8001d58:	d101      	bne.n	8001d5e <_fflush_r+0x62>
 8001d5a:	68ac      	ldr	r4, [r5, #8]
 8001d5c:	e7df      	b.n	8001d1e <_fflush_r+0x22>
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <_fflush_r+0x74>)
 8001d60:	429c      	cmp	r4, r3
 8001d62:	bf08      	it	eq
 8001d64:	68ec      	ldreq	r4, [r5, #12]
 8001d66:	e7da      	b.n	8001d1e <_fflush_r+0x22>
 8001d68:	08002a10 	.word	0x08002a10
 8001d6c:	08002a30 	.word	0x08002a30
 8001d70:	080029f0 	.word	0x080029f0

08001d74 <std>:
 8001d74:	2300      	movs	r3, #0
 8001d76:	b510      	push	{r4, lr}
 8001d78:	4604      	mov	r4, r0
 8001d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8001d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d82:	6083      	str	r3, [r0, #8]
 8001d84:	8181      	strh	r1, [r0, #12]
 8001d86:	6643      	str	r3, [r0, #100]	; 0x64
 8001d88:	81c2      	strh	r2, [r0, #14]
 8001d8a:	6183      	str	r3, [r0, #24]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	2208      	movs	r2, #8
 8001d90:	305c      	adds	r0, #92	; 0x5c
 8001d92:	f7ff fddb 	bl	800194c <memset>
 8001d96:	4b05      	ldr	r3, [pc, #20]	; (8001dac <std+0x38>)
 8001d98:	6224      	str	r4, [r4, #32]
 8001d9a:	6263      	str	r3, [r4, #36]	; 0x24
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <std+0x3c>)
 8001d9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <std+0x40>)
 8001da2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <std+0x44>)
 8001da6:	6323      	str	r3, [r4, #48]	; 0x30
 8001da8:	bd10      	pop	{r4, pc}
 8001daa:	bf00      	nop
 8001dac:	080027e5 	.word	0x080027e5
 8001db0:	08002807 	.word	0x08002807
 8001db4:	0800283f 	.word	0x0800283f
 8001db8:	08002863 	.word	0x08002863

08001dbc <_cleanup_r>:
 8001dbc:	4901      	ldr	r1, [pc, #4]	; (8001dc4 <_cleanup_r+0x8>)
 8001dbe:	f000 b8af 	b.w	8001f20 <_fwalk_reent>
 8001dc2:	bf00      	nop
 8001dc4:	08001cfd 	.word	0x08001cfd

08001dc8 <__sfmoreglue>:
 8001dc8:	2268      	movs	r2, #104	; 0x68
 8001dca:	b570      	push	{r4, r5, r6, lr}
 8001dcc:	1e4d      	subs	r5, r1, #1
 8001dce:	4355      	muls	r5, r2
 8001dd0:	460e      	mov	r6, r1
 8001dd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001dd6:	f000 f993 	bl	8002100 <_malloc_r>
 8001dda:	4604      	mov	r4, r0
 8001ddc:	b140      	cbz	r0, 8001df0 <__sfmoreglue+0x28>
 8001dde:	2100      	movs	r1, #0
 8001de0:	e9c0 1600 	strd	r1, r6, [r0]
 8001de4:	300c      	adds	r0, #12
 8001de6:	60a0      	str	r0, [r4, #8]
 8001de8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001dec:	f7ff fdae 	bl	800194c <memset>
 8001df0:	4620      	mov	r0, r4
 8001df2:	bd70      	pop	{r4, r5, r6, pc}

08001df4 <__sfp_lock_acquire>:
 8001df4:	4801      	ldr	r0, [pc, #4]	; (8001dfc <__sfp_lock_acquire+0x8>)
 8001df6:	f000 b8b3 	b.w	8001f60 <__retarget_lock_acquire_recursive>
 8001dfa:	bf00      	nop
 8001dfc:	200000dd 	.word	0x200000dd

08001e00 <__sfp_lock_release>:
 8001e00:	4801      	ldr	r0, [pc, #4]	; (8001e08 <__sfp_lock_release+0x8>)
 8001e02:	f000 b8ae 	b.w	8001f62 <__retarget_lock_release_recursive>
 8001e06:	bf00      	nop
 8001e08:	200000dd 	.word	0x200000dd

08001e0c <__sinit_lock_acquire>:
 8001e0c:	4801      	ldr	r0, [pc, #4]	; (8001e14 <__sinit_lock_acquire+0x8>)
 8001e0e:	f000 b8a7 	b.w	8001f60 <__retarget_lock_acquire_recursive>
 8001e12:	bf00      	nop
 8001e14:	200000de 	.word	0x200000de

08001e18 <__sinit_lock_release>:
 8001e18:	4801      	ldr	r0, [pc, #4]	; (8001e20 <__sinit_lock_release+0x8>)
 8001e1a:	f000 b8a2 	b.w	8001f62 <__retarget_lock_release_recursive>
 8001e1e:	bf00      	nop
 8001e20:	200000de 	.word	0x200000de

08001e24 <__sinit>:
 8001e24:	b510      	push	{r4, lr}
 8001e26:	4604      	mov	r4, r0
 8001e28:	f7ff fff0 	bl	8001e0c <__sinit_lock_acquire>
 8001e2c:	69a3      	ldr	r3, [r4, #24]
 8001e2e:	b11b      	cbz	r3, 8001e38 <__sinit+0x14>
 8001e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e34:	f7ff bff0 	b.w	8001e18 <__sinit_lock_release>
 8001e38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001e3c:	6523      	str	r3, [r4, #80]	; 0x50
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <__sinit+0x68>)
 8001e40:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <__sinit+0x6c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	62a2      	str	r2, [r4, #40]	; 0x28
 8001e46:	42a3      	cmp	r3, r4
 8001e48:	bf08      	it	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	bf08      	it	eq
 8001e50:	61a3      	streq	r3, [r4, #24]
 8001e52:	f000 f81f 	bl	8001e94 <__sfp>
 8001e56:	6060      	str	r0, [r4, #4]
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f000 f81b 	bl	8001e94 <__sfp>
 8001e5e:	60a0      	str	r0, [r4, #8]
 8001e60:	4620      	mov	r0, r4
 8001e62:	f000 f817 	bl	8001e94 <__sfp>
 8001e66:	2200      	movs	r2, #0
 8001e68:	2104      	movs	r1, #4
 8001e6a:	60e0      	str	r0, [r4, #12]
 8001e6c:	6860      	ldr	r0, [r4, #4]
 8001e6e:	f7ff ff81 	bl	8001d74 <std>
 8001e72:	2201      	movs	r2, #1
 8001e74:	2109      	movs	r1, #9
 8001e76:	68a0      	ldr	r0, [r4, #8]
 8001e78:	f7ff ff7c 	bl	8001d74 <std>
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	2112      	movs	r1, #18
 8001e80:	68e0      	ldr	r0, [r4, #12]
 8001e82:	f7ff ff77 	bl	8001d74 <std>
 8001e86:	2301      	movs	r3, #1
 8001e88:	61a3      	str	r3, [r4, #24]
 8001e8a:	e7d1      	b.n	8001e30 <__sinit+0xc>
 8001e8c:	080029ec 	.word	0x080029ec
 8001e90:	08001dbd 	.word	0x08001dbd

08001e94 <__sfp>:
 8001e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e96:	4607      	mov	r7, r0
 8001e98:	f7ff ffac 	bl	8001df4 <__sfp_lock_acquire>
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <__sfp+0x84>)
 8001e9e:	681e      	ldr	r6, [r3, #0]
 8001ea0:	69b3      	ldr	r3, [r6, #24]
 8001ea2:	b913      	cbnz	r3, 8001eaa <__sfp+0x16>
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f7ff ffbd 	bl	8001e24 <__sinit>
 8001eaa:	3648      	adds	r6, #72	; 0x48
 8001eac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	d503      	bpl.n	8001ebc <__sfp+0x28>
 8001eb4:	6833      	ldr	r3, [r6, #0]
 8001eb6:	b30b      	cbz	r3, 8001efc <__sfp+0x68>
 8001eb8:	6836      	ldr	r6, [r6, #0]
 8001eba:	e7f7      	b.n	8001eac <__sfp+0x18>
 8001ebc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001ec0:	b9d5      	cbnz	r5, 8001ef8 <__sfp+0x64>
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <__sfp+0x88>)
 8001ec4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ec8:	60e3      	str	r3, [r4, #12]
 8001eca:	6665      	str	r5, [r4, #100]	; 0x64
 8001ecc:	f000 f847 	bl	8001f5e <__retarget_lock_init_recursive>
 8001ed0:	f7ff ff96 	bl	8001e00 <__sfp_lock_release>
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001edc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001ee0:	6025      	str	r5, [r4, #0]
 8001ee2:	61a5      	str	r5, [r4, #24]
 8001ee4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ee8:	f7ff fd30 	bl	800194c <memset>
 8001eec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ef0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ef8:	3468      	adds	r4, #104	; 0x68
 8001efa:	e7d9      	b.n	8001eb0 <__sfp+0x1c>
 8001efc:	2104      	movs	r1, #4
 8001efe:	4638      	mov	r0, r7
 8001f00:	f7ff ff62 	bl	8001dc8 <__sfmoreglue>
 8001f04:	4604      	mov	r4, r0
 8001f06:	6030      	str	r0, [r6, #0]
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	d1d5      	bne.n	8001eb8 <__sfp+0x24>
 8001f0c:	f7ff ff78 	bl	8001e00 <__sfp_lock_release>
 8001f10:	230c      	movs	r3, #12
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	e7ee      	b.n	8001ef4 <__sfp+0x60>
 8001f16:	bf00      	nop
 8001f18:	080029ec 	.word	0x080029ec
 8001f1c:	ffff0001 	.word	0xffff0001

08001f20 <_fwalk_reent>:
 8001f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f24:	4606      	mov	r6, r0
 8001f26:	4688      	mov	r8, r1
 8001f28:	2700      	movs	r7, #0
 8001f2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001f2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f32:	f1b9 0901 	subs.w	r9, r9, #1
 8001f36:	d505      	bpl.n	8001f44 <_fwalk_reent+0x24>
 8001f38:	6824      	ldr	r4, [r4, #0]
 8001f3a:	2c00      	cmp	r4, #0
 8001f3c:	d1f7      	bne.n	8001f2e <_fwalk_reent+0xe>
 8001f3e:	4638      	mov	r0, r7
 8001f40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f44:	89ab      	ldrh	r3, [r5, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d907      	bls.n	8001f5a <_fwalk_reent+0x3a>
 8001f4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	d003      	beq.n	8001f5a <_fwalk_reent+0x3a>
 8001f52:	4629      	mov	r1, r5
 8001f54:	4630      	mov	r0, r6
 8001f56:	47c0      	blx	r8
 8001f58:	4307      	orrs	r7, r0
 8001f5a:	3568      	adds	r5, #104	; 0x68
 8001f5c:	e7e9      	b.n	8001f32 <_fwalk_reent+0x12>

08001f5e <__retarget_lock_init_recursive>:
 8001f5e:	4770      	bx	lr

08001f60 <__retarget_lock_acquire_recursive>:
 8001f60:	4770      	bx	lr

08001f62 <__retarget_lock_release_recursive>:
 8001f62:	4770      	bx	lr

08001f64 <__swhatbuf_r>:
 8001f64:	b570      	push	{r4, r5, r6, lr}
 8001f66:	460e      	mov	r6, r1
 8001f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f6c:	4614      	mov	r4, r2
 8001f6e:	2900      	cmp	r1, #0
 8001f70:	461d      	mov	r5, r3
 8001f72:	b096      	sub	sp, #88	; 0x58
 8001f74:	da08      	bge.n	8001f88 <__swhatbuf_r+0x24>
 8001f76:	2200      	movs	r2, #0
 8001f78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001f7c:	602a      	str	r2, [r5, #0]
 8001f7e:	061a      	lsls	r2, r3, #24
 8001f80:	d410      	bmi.n	8001fa4 <__swhatbuf_r+0x40>
 8001f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f86:	e00e      	b.n	8001fa6 <__swhatbuf_r+0x42>
 8001f88:	466a      	mov	r2, sp
 8001f8a:	f000 fc91 	bl	80028b0 <_fstat_r>
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	dbf1      	blt.n	8001f76 <__swhatbuf_r+0x12>
 8001f92:	9a01      	ldr	r2, [sp, #4]
 8001f94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001f98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001f9c:	425a      	negs	r2, r3
 8001f9e:	415a      	adcs	r2, r3
 8001fa0:	602a      	str	r2, [r5, #0]
 8001fa2:	e7ee      	b.n	8001f82 <__swhatbuf_r+0x1e>
 8001fa4:	2340      	movs	r3, #64	; 0x40
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	6023      	str	r3, [r4, #0]
 8001faa:	b016      	add	sp, #88	; 0x58
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
	...

08001fb0 <__smakebuf_r>:
 8001fb0:	898b      	ldrh	r3, [r1, #12]
 8001fb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001fb4:	079d      	lsls	r5, r3, #30
 8001fb6:	4606      	mov	r6, r0
 8001fb8:	460c      	mov	r4, r1
 8001fba:	d507      	bpl.n	8001fcc <__smakebuf_r+0x1c>
 8001fbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001fc0:	6023      	str	r3, [r4, #0]
 8001fc2:	6123      	str	r3, [r4, #16]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	6163      	str	r3, [r4, #20]
 8001fc8:	b002      	add	sp, #8
 8001fca:	bd70      	pop	{r4, r5, r6, pc}
 8001fcc:	466a      	mov	r2, sp
 8001fce:	ab01      	add	r3, sp, #4
 8001fd0:	f7ff ffc8 	bl	8001f64 <__swhatbuf_r>
 8001fd4:	9900      	ldr	r1, [sp, #0]
 8001fd6:	4605      	mov	r5, r0
 8001fd8:	4630      	mov	r0, r6
 8001fda:	f000 f891 	bl	8002100 <_malloc_r>
 8001fde:	b948      	cbnz	r0, 8001ff4 <__smakebuf_r+0x44>
 8001fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fe4:	059a      	lsls	r2, r3, #22
 8001fe6:	d4ef      	bmi.n	8001fc8 <__smakebuf_r+0x18>
 8001fe8:	f023 0303 	bic.w	r3, r3, #3
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	81a3      	strh	r3, [r4, #12]
 8001ff2:	e7e3      	b.n	8001fbc <__smakebuf_r+0xc>
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <__smakebuf_r+0x7c>)
 8001ff6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ff8:	89a3      	ldrh	r3, [r4, #12]
 8001ffa:	6020      	str	r0, [r4, #0]
 8001ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002000:	81a3      	strh	r3, [r4, #12]
 8002002:	9b00      	ldr	r3, [sp, #0]
 8002004:	6120      	str	r0, [r4, #16]
 8002006:	6163      	str	r3, [r4, #20]
 8002008:	9b01      	ldr	r3, [sp, #4]
 800200a:	b15b      	cbz	r3, 8002024 <__smakebuf_r+0x74>
 800200c:	4630      	mov	r0, r6
 800200e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002012:	f000 fc5f 	bl	80028d4 <_isatty_r>
 8002016:	b128      	cbz	r0, 8002024 <__smakebuf_r+0x74>
 8002018:	89a3      	ldrh	r3, [r4, #12]
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	81a3      	strh	r3, [r4, #12]
 8002024:	89a0      	ldrh	r0, [r4, #12]
 8002026:	4305      	orrs	r5, r0
 8002028:	81a5      	strh	r5, [r4, #12]
 800202a:	e7cd      	b.n	8001fc8 <__smakebuf_r+0x18>
 800202c:	08001dbd 	.word	0x08001dbd

08002030 <_free_r>:
 8002030:	b538      	push	{r3, r4, r5, lr}
 8002032:	4605      	mov	r5, r0
 8002034:	2900      	cmp	r1, #0
 8002036:	d040      	beq.n	80020ba <_free_r+0x8a>
 8002038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800203c:	1f0c      	subs	r4, r1, #4
 800203e:	2b00      	cmp	r3, #0
 8002040:	bfb8      	it	lt
 8002042:	18e4      	addlt	r4, r4, r3
 8002044:	f000 fc76 	bl	8002934 <__malloc_lock>
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <_free_r+0x8c>)
 800204a:	6813      	ldr	r3, [r2, #0]
 800204c:	b933      	cbnz	r3, 800205c <_free_r+0x2c>
 800204e:	6063      	str	r3, [r4, #4]
 8002050:	6014      	str	r4, [r2, #0]
 8002052:	4628      	mov	r0, r5
 8002054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002058:	f000 bc72 	b.w	8002940 <__malloc_unlock>
 800205c:	42a3      	cmp	r3, r4
 800205e:	d908      	bls.n	8002072 <_free_r+0x42>
 8002060:	6820      	ldr	r0, [r4, #0]
 8002062:	1821      	adds	r1, r4, r0
 8002064:	428b      	cmp	r3, r1
 8002066:	bf01      	itttt	eq
 8002068:	6819      	ldreq	r1, [r3, #0]
 800206a:	685b      	ldreq	r3, [r3, #4]
 800206c:	1809      	addeq	r1, r1, r0
 800206e:	6021      	streq	r1, [r4, #0]
 8002070:	e7ed      	b.n	800204e <_free_r+0x1e>
 8002072:	461a      	mov	r2, r3
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	b10b      	cbz	r3, 800207c <_free_r+0x4c>
 8002078:	42a3      	cmp	r3, r4
 800207a:	d9fa      	bls.n	8002072 <_free_r+0x42>
 800207c:	6811      	ldr	r1, [r2, #0]
 800207e:	1850      	adds	r0, r2, r1
 8002080:	42a0      	cmp	r0, r4
 8002082:	d10b      	bne.n	800209c <_free_r+0x6c>
 8002084:	6820      	ldr	r0, [r4, #0]
 8002086:	4401      	add	r1, r0
 8002088:	1850      	adds	r0, r2, r1
 800208a:	4283      	cmp	r3, r0
 800208c:	6011      	str	r1, [r2, #0]
 800208e:	d1e0      	bne.n	8002052 <_free_r+0x22>
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4401      	add	r1, r0
 8002096:	6011      	str	r1, [r2, #0]
 8002098:	6053      	str	r3, [r2, #4]
 800209a:	e7da      	b.n	8002052 <_free_r+0x22>
 800209c:	d902      	bls.n	80020a4 <_free_r+0x74>
 800209e:	230c      	movs	r3, #12
 80020a0:	602b      	str	r3, [r5, #0]
 80020a2:	e7d6      	b.n	8002052 <_free_r+0x22>
 80020a4:	6820      	ldr	r0, [r4, #0]
 80020a6:	1821      	adds	r1, r4, r0
 80020a8:	428b      	cmp	r3, r1
 80020aa:	bf01      	itttt	eq
 80020ac:	6819      	ldreq	r1, [r3, #0]
 80020ae:	685b      	ldreq	r3, [r3, #4]
 80020b0:	1809      	addeq	r1, r1, r0
 80020b2:	6021      	streq	r1, [r4, #0]
 80020b4:	6063      	str	r3, [r4, #4]
 80020b6:	6054      	str	r4, [r2, #4]
 80020b8:	e7cb      	b.n	8002052 <_free_r+0x22>
 80020ba:	bd38      	pop	{r3, r4, r5, pc}
 80020bc:	200000e0 	.word	0x200000e0

080020c0 <sbrk_aligned>:
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	4e0e      	ldr	r6, [pc, #56]	; (80020fc <sbrk_aligned+0x3c>)
 80020c4:	460c      	mov	r4, r1
 80020c6:	6831      	ldr	r1, [r6, #0]
 80020c8:	4605      	mov	r5, r0
 80020ca:	b911      	cbnz	r1, 80020d2 <sbrk_aligned+0x12>
 80020cc:	f000 fb7a 	bl	80027c4 <_sbrk_r>
 80020d0:	6030      	str	r0, [r6, #0]
 80020d2:	4621      	mov	r1, r4
 80020d4:	4628      	mov	r0, r5
 80020d6:	f000 fb75 	bl	80027c4 <_sbrk_r>
 80020da:	1c43      	adds	r3, r0, #1
 80020dc:	d00a      	beq.n	80020f4 <sbrk_aligned+0x34>
 80020de:	1cc4      	adds	r4, r0, #3
 80020e0:	f024 0403 	bic.w	r4, r4, #3
 80020e4:	42a0      	cmp	r0, r4
 80020e6:	d007      	beq.n	80020f8 <sbrk_aligned+0x38>
 80020e8:	1a21      	subs	r1, r4, r0
 80020ea:	4628      	mov	r0, r5
 80020ec:	f000 fb6a 	bl	80027c4 <_sbrk_r>
 80020f0:	3001      	adds	r0, #1
 80020f2:	d101      	bne.n	80020f8 <sbrk_aligned+0x38>
 80020f4:	f04f 34ff 	mov.w	r4, #4294967295
 80020f8:	4620      	mov	r0, r4
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
 80020fc:	200000e4 	.word	0x200000e4

08002100 <_malloc_r>:
 8002100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002104:	1ccd      	adds	r5, r1, #3
 8002106:	f025 0503 	bic.w	r5, r5, #3
 800210a:	3508      	adds	r5, #8
 800210c:	2d0c      	cmp	r5, #12
 800210e:	bf38      	it	cc
 8002110:	250c      	movcc	r5, #12
 8002112:	2d00      	cmp	r5, #0
 8002114:	4607      	mov	r7, r0
 8002116:	db01      	blt.n	800211c <_malloc_r+0x1c>
 8002118:	42a9      	cmp	r1, r5
 800211a:	d905      	bls.n	8002128 <_malloc_r+0x28>
 800211c:	230c      	movs	r3, #12
 800211e:	2600      	movs	r6, #0
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	4630      	mov	r0, r6
 8002124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002128:	4e2e      	ldr	r6, [pc, #184]	; (80021e4 <_malloc_r+0xe4>)
 800212a:	f000 fc03 	bl	8002934 <__malloc_lock>
 800212e:	6833      	ldr	r3, [r6, #0]
 8002130:	461c      	mov	r4, r3
 8002132:	bb34      	cbnz	r4, 8002182 <_malloc_r+0x82>
 8002134:	4629      	mov	r1, r5
 8002136:	4638      	mov	r0, r7
 8002138:	f7ff ffc2 	bl	80020c0 <sbrk_aligned>
 800213c:	1c43      	adds	r3, r0, #1
 800213e:	4604      	mov	r4, r0
 8002140:	d14d      	bne.n	80021de <_malloc_r+0xde>
 8002142:	6834      	ldr	r4, [r6, #0]
 8002144:	4626      	mov	r6, r4
 8002146:	2e00      	cmp	r6, #0
 8002148:	d140      	bne.n	80021cc <_malloc_r+0xcc>
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	4631      	mov	r1, r6
 800214e:	4638      	mov	r0, r7
 8002150:	eb04 0803 	add.w	r8, r4, r3
 8002154:	f000 fb36 	bl	80027c4 <_sbrk_r>
 8002158:	4580      	cmp	r8, r0
 800215a:	d13a      	bne.n	80021d2 <_malloc_r+0xd2>
 800215c:	6821      	ldr	r1, [r4, #0]
 800215e:	3503      	adds	r5, #3
 8002160:	1a6d      	subs	r5, r5, r1
 8002162:	f025 0503 	bic.w	r5, r5, #3
 8002166:	3508      	adds	r5, #8
 8002168:	2d0c      	cmp	r5, #12
 800216a:	bf38      	it	cc
 800216c:	250c      	movcc	r5, #12
 800216e:	4638      	mov	r0, r7
 8002170:	4629      	mov	r1, r5
 8002172:	f7ff ffa5 	bl	80020c0 <sbrk_aligned>
 8002176:	3001      	adds	r0, #1
 8002178:	d02b      	beq.n	80021d2 <_malloc_r+0xd2>
 800217a:	6823      	ldr	r3, [r4, #0]
 800217c:	442b      	add	r3, r5
 800217e:	6023      	str	r3, [r4, #0]
 8002180:	e00e      	b.n	80021a0 <_malloc_r+0xa0>
 8002182:	6822      	ldr	r2, [r4, #0]
 8002184:	1b52      	subs	r2, r2, r5
 8002186:	d41e      	bmi.n	80021c6 <_malloc_r+0xc6>
 8002188:	2a0b      	cmp	r2, #11
 800218a:	d916      	bls.n	80021ba <_malloc_r+0xba>
 800218c:	1961      	adds	r1, r4, r5
 800218e:	42a3      	cmp	r3, r4
 8002190:	6025      	str	r5, [r4, #0]
 8002192:	bf18      	it	ne
 8002194:	6059      	strne	r1, [r3, #4]
 8002196:	6863      	ldr	r3, [r4, #4]
 8002198:	bf08      	it	eq
 800219a:	6031      	streq	r1, [r6, #0]
 800219c:	5162      	str	r2, [r4, r5]
 800219e:	604b      	str	r3, [r1, #4]
 80021a0:	4638      	mov	r0, r7
 80021a2:	f104 060b 	add.w	r6, r4, #11
 80021a6:	f000 fbcb 	bl	8002940 <__malloc_unlock>
 80021aa:	f026 0607 	bic.w	r6, r6, #7
 80021ae:	1d23      	adds	r3, r4, #4
 80021b0:	1af2      	subs	r2, r6, r3
 80021b2:	d0b6      	beq.n	8002122 <_malloc_r+0x22>
 80021b4:	1b9b      	subs	r3, r3, r6
 80021b6:	50a3      	str	r3, [r4, r2]
 80021b8:	e7b3      	b.n	8002122 <_malloc_r+0x22>
 80021ba:	6862      	ldr	r2, [r4, #4]
 80021bc:	42a3      	cmp	r3, r4
 80021be:	bf0c      	ite	eq
 80021c0:	6032      	streq	r2, [r6, #0]
 80021c2:	605a      	strne	r2, [r3, #4]
 80021c4:	e7ec      	b.n	80021a0 <_malloc_r+0xa0>
 80021c6:	4623      	mov	r3, r4
 80021c8:	6864      	ldr	r4, [r4, #4]
 80021ca:	e7b2      	b.n	8002132 <_malloc_r+0x32>
 80021cc:	4634      	mov	r4, r6
 80021ce:	6876      	ldr	r6, [r6, #4]
 80021d0:	e7b9      	b.n	8002146 <_malloc_r+0x46>
 80021d2:	230c      	movs	r3, #12
 80021d4:	4638      	mov	r0, r7
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	f000 fbb2 	bl	8002940 <__malloc_unlock>
 80021dc:	e7a1      	b.n	8002122 <_malloc_r+0x22>
 80021de:	6025      	str	r5, [r4, #0]
 80021e0:	e7de      	b.n	80021a0 <_malloc_r+0xa0>
 80021e2:	bf00      	nop
 80021e4:	200000e0 	.word	0x200000e0

080021e8 <__sfputc_r>:
 80021e8:	6893      	ldr	r3, [r2, #8]
 80021ea:	b410      	push	{r4}
 80021ec:	3b01      	subs	r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	6093      	str	r3, [r2, #8]
 80021f2:	da07      	bge.n	8002204 <__sfputc_r+0x1c>
 80021f4:	6994      	ldr	r4, [r2, #24]
 80021f6:	42a3      	cmp	r3, r4
 80021f8:	db01      	blt.n	80021fe <__sfputc_r+0x16>
 80021fa:	290a      	cmp	r1, #10
 80021fc:	d102      	bne.n	8002204 <__sfputc_r+0x1c>
 80021fe:	bc10      	pop	{r4}
 8002200:	f7ff bc3a 	b.w	8001a78 <__swbuf_r>
 8002204:	6813      	ldr	r3, [r2, #0]
 8002206:	1c58      	adds	r0, r3, #1
 8002208:	6010      	str	r0, [r2, #0]
 800220a:	7019      	strb	r1, [r3, #0]
 800220c:	4608      	mov	r0, r1
 800220e:	bc10      	pop	{r4}
 8002210:	4770      	bx	lr

08002212 <__sfputs_r>:
 8002212:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002214:	4606      	mov	r6, r0
 8002216:	460f      	mov	r7, r1
 8002218:	4614      	mov	r4, r2
 800221a:	18d5      	adds	r5, r2, r3
 800221c:	42ac      	cmp	r4, r5
 800221e:	d101      	bne.n	8002224 <__sfputs_r+0x12>
 8002220:	2000      	movs	r0, #0
 8002222:	e007      	b.n	8002234 <__sfputs_r+0x22>
 8002224:	463a      	mov	r2, r7
 8002226:	4630      	mov	r0, r6
 8002228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800222c:	f7ff ffdc 	bl	80021e8 <__sfputc_r>
 8002230:	1c43      	adds	r3, r0, #1
 8002232:	d1f3      	bne.n	800221c <__sfputs_r+0xa>
 8002234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002238 <_vfiprintf_r>:
 8002238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800223c:	460d      	mov	r5, r1
 800223e:	4614      	mov	r4, r2
 8002240:	4698      	mov	r8, r3
 8002242:	4606      	mov	r6, r0
 8002244:	b09d      	sub	sp, #116	; 0x74
 8002246:	b118      	cbz	r0, 8002250 <_vfiprintf_r+0x18>
 8002248:	6983      	ldr	r3, [r0, #24]
 800224a:	b90b      	cbnz	r3, 8002250 <_vfiprintf_r+0x18>
 800224c:	f7ff fdea 	bl	8001e24 <__sinit>
 8002250:	4b89      	ldr	r3, [pc, #548]	; (8002478 <_vfiprintf_r+0x240>)
 8002252:	429d      	cmp	r5, r3
 8002254:	d11b      	bne.n	800228e <_vfiprintf_r+0x56>
 8002256:	6875      	ldr	r5, [r6, #4]
 8002258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800225a:	07d9      	lsls	r1, r3, #31
 800225c:	d405      	bmi.n	800226a <_vfiprintf_r+0x32>
 800225e:	89ab      	ldrh	r3, [r5, #12]
 8002260:	059a      	lsls	r2, r3, #22
 8002262:	d402      	bmi.n	800226a <_vfiprintf_r+0x32>
 8002264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002266:	f7ff fe7b 	bl	8001f60 <__retarget_lock_acquire_recursive>
 800226a:	89ab      	ldrh	r3, [r5, #12]
 800226c:	071b      	lsls	r3, r3, #28
 800226e:	d501      	bpl.n	8002274 <_vfiprintf_r+0x3c>
 8002270:	692b      	ldr	r3, [r5, #16]
 8002272:	b9eb      	cbnz	r3, 80022b0 <_vfiprintf_r+0x78>
 8002274:	4629      	mov	r1, r5
 8002276:	4630      	mov	r0, r6
 8002278:	f7ff fc50 	bl	8001b1c <__swsetup_r>
 800227c:	b1c0      	cbz	r0, 80022b0 <_vfiprintf_r+0x78>
 800227e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002280:	07dc      	lsls	r4, r3, #31
 8002282:	d50e      	bpl.n	80022a2 <_vfiprintf_r+0x6a>
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	b01d      	add	sp, #116	; 0x74
 800228a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800228e:	4b7b      	ldr	r3, [pc, #492]	; (800247c <_vfiprintf_r+0x244>)
 8002290:	429d      	cmp	r5, r3
 8002292:	d101      	bne.n	8002298 <_vfiprintf_r+0x60>
 8002294:	68b5      	ldr	r5, [r6, #8]
 8002296:	e7df      	b.n	8002258 <_vfiprintf_r+0x20>
 8002298:	4b79      	ldr	r3, [pc, #484]	; (8002480 <_vfiprintf_r+0x248>)
 800229a:	429d      	cmp	r5, r3
 800229c:	bf08      	it	eq
 800229e:	68f5      	ldreq	r5, [r6, #12]
 80022a0:	e7da      	b.n	8002258 <_vfiprintf_r+0x20>
 80022a2:	89ab      	ldrh	r3, [r5, #12]
 80022a4:	0598      	lsls	r0, r3, #22
 80022a6:	d4ed      	bmi.n	8002284 <_vfiprintf_r+0x4c>
 80022a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022aa:	f7ff fe5a 	bl	8001f62 <__retarget_lock_release_recursive>
 80022ae:	e7e9      	b.n	8002284 <_vfiprintf_r+0x4c>
 80022b0:	2300      	movs	r3, #0
 80022b2:	9309      	str	r3, [sp, #36]	; 0x24
 80022b4:	2320      	movs	r3, #32
 80022b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022ba:	2330      	movs	r3, #48	; 0x30
 80022bc:	f04f 0901 	mov.w	r9, #1
 80022c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80022c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002484 <_vfiprintf_r+0x24c>
 80022c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022cc:	4623      	mov	r3, r4
 80022ce:	469a      	mov	sl, r3
 80022d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022d4:	b10a      	cbz	r2, 80022da <_vfiprintf_r+0xa2>
 80022d6:	2a25      	cmp	r2, #37	; 0x25
 80022d8:	d1f9      	bne.n	80022ce <_vfiprintf_r+0x96>
 80022da:	ebba 0b04 	subs.w	fp, sl, r4
 80022de:	d00b      	beq.n	80022f8 <_vfiprintf_r+0xc0>
 80022e0:	465b      	mov	r3, fp
 80022e2:	4622      	mov	r2, r4
 80022e4:	4629      	mov	r1, r5
 80022e6:	4630      	mov	r0, r6
 80022e8:	f7ff ff93 	bl	8002212 <__sfputs_r>
 80022ec:	3001      	adds	r0, #1
 80022ee:	f000 80aa 	beq.w	8002446 <_vfiprintf_r+0x20e>
 80022f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80022f4:	445a      	add	r2, fp
 80022f6:	9209      	str	r2, [sp, #36]	; 0x24
 80022f8:	f89a 3000 	ldrb.w	r3, [sl]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80a2 	beq.w	8002446 <_vfiprintf_r+0x20e>
 8002302:	2300      	movs	r3, #0
 8002304:	f04f 32ff 	mov.w	r2, #4294967295
 8002308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800230c:	f10a 0a01 	add.w	sl, sl, #1
 8002310:	9304      	str	r3, [sp, #16]
 8002312:	9307      	str	r3, [sp, #28]
 8002314:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002318:	931a      	str	r3, [sp, #104]	; 0x68
 800231a:	4654      	mov	r4, sl
 800231c:	2205      	movs	r2, #5
 800231e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002322:	4858      	ldr	r0, [pc, #352]	; (8002484 <_vfiprintf_r+0x24c>)
 8002324:	f000 faf8 	bl	8002918 <memchr>
 8002328:	9a04      	ldr	r2, [sp, #16]
 800232a:	b9d8      	cbnz	r0, 8002364 <_vfiprintf_r+0x12c>
 800232c:	06d1      	lsls	r1, r2, #27
 800232e:	bf44      	itt	mi
 8002330:	2320      	movmi	r3, #32
 8002332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002336:	0713      	lsls	r3, r2, #28
 8002338:	bf44      	itt	mi
 800233a:	232b      	movmi	r3, #43	; 0x2b
 800233c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002340:	f89a 3000 	ldrb.w	r3, [sl]
 8002344:	2b2a      	cmp	r3, #42	; 0x2a
 8002346:	d015      	beq.n	8002374 <_vfiprintf_r+0x13c>
 8002348:	4654      	mov	r4, sl
 800234a:	2000      	movs	r0, #0
 800234c:	f04f 0c0a 	mov.w	ip, #10
 8002350:	9a07      	ldr	r2, [sp, #28]
 8002352:	4621      	mov	r1, r4
 8002354:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002358:	3b30      	subs	r3, #48	; 0x30
 800235a:	2b09      	cmp	r3, #9
 800235c:	d94e      	bls.n	80023fc <_vfiprintf_r+0x1c4>
 800235e:	b1b0      	cbz	r0, 800238e <_vfiprintf_r+0x156>
 8002360:	9207      	str	r2, [sp, #28]
 8002362:	e014      	b.n	800238e <_vfiprintf_r+0x156>
 8002364:	eba0 0308 	sub.w	r3, r0, r8
 8002368:	fa09 f303 	lsl.w	r3, r9, r3
 800236c:	4313      	orrs	r3, r2
 800236e:	46a2      	mov	sl, r4
 8002370:	9304      	str	r3, [sp, #16]
 8002372:	e7d2      	b.n	800231a <_vfiprintf_r+0xe2>
 8002374:	9b03      	ldr	r3, [sp, #12]
 8002376:	1d19      	adds	r1, r3, #4
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	9103      	str	r1, [sp, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	bfbb      	ittet	lt
 8002380:	425b      	neglt	r3, r3
 8002382:	f042 0202 	orrlt.w	r2, r2, #2
 8002386:	9307      	strge	r3, [sp, #28]
 8002388:	9307      	strlt	r3, [sp, #28]
 800238a:	bfb8      	it	lt
 800238c:	9204      	strlt	r2, [sp, #16]
 800238e:	7823      	ldrb	r3, [r4, #0]
 8002390:	2b2e      	cmp	r3, #46	; 0x2e
 8002392:	d10c      	bne.n	80023ae <_vfiprintf_r+0x176>
 8002394:	7863      	ldrb	r3, [r4, #1]
 8002396:	2b2a      	cmp	r3, #42	; 0x2a
 8002398:	d135      	bne.n	8002406 <_vfiprintf_r+0x1ce>
 800239a:	9b03      	ldr	r3, [sp, #12]
 800239c:	3402      	adds	r4, #2
 800239e:	1d1a      	adds	r2, r3, #4
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	9203      	str	r2, [sp, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	bfb8      	it	lt
 80023a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80023ac:	9305      	str	r3, [sp, #20]
 80023ae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002488 <_vfiprintf_r+0x250>
 80023b2:	2203      	movs	r2, #3
 80023b4:	4650      	mov	r0, sl
 80023b6:	7821      	ldrb	r1, [r4, #0]
 80023b8:	f000 faae 	bl	8002918 <memchr>
 80023bc:	b140      	cbz	r0, 80023d0 <_vfiprintf_r+0x198>
 80023be:	2340      	movs	r3, #64	; 0x40
 80023c0:	eba0 000a 	sub.w	r0, r0, sl
 80023c4:	fa03 f000 	lsl.w	r0, r3, r0
 80023c8:	9b04      	ldr	r3, [sp, #16]
 80023ca:	3401      	adds	r4, #1
 80023cc:	4303      	orrs	r3, r0
 80023ce:	9304      	str	r3, [sp, #16]
 80023d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023d4:	2206      	movs	r2, #6
 80023d6:	482d      	ldr	r0, [pc, #180]	; (800248c <_vfiprintf_r+0x254>)
 80023d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023dc:	f000 fa9c 	bl	8002918 <memchr>
 80023e0:	2800      	cmp	r0, #0
 80023e2:	d03f      	beq.n	8002464 <_vfiprintf_r+0x22c>
 80023e4:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <_vfiprintf_r+0x258>)
 80023e6:	bb1b      	cbnz	r3, 8002430 <_vfiprintf_r+0x1f8>
 80023e8:	9b03      	ldr	r3, [sp, #12]
 80023ea:	3307      	adds	r3, #7
 80023ec:	f023 0307 	bic.w	r3, r3, #7
 80023f0:	3308      	adds	r3, #8
 80023f2:	9303      	str	r3, [sp, #12]
 80023f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023f6:	443b      	add	r3, r7
 80023f8:	9309      	str	r3, [sp, #36]	; 0x24
 80023fa:	e767      	b.n	80022cc <_vfiprintf_r+0x94>
 80023fc:	460c      	mov	r4, r1
 80023fe:	2001      	movs	r0, #1
 8002400:	fb0c 3202 	mla	r2, ip, r2, r3
 8002404:	e7a5      	b.n	8002352 <_vfiprintf_r+0x11a>
 8002406:	2300      	movs	r3, #0
 8002408:	f04f 0c0a 	mov.w	ip, #10
 800240c:	4619      	mov	r1, r3
 800240e:	3401      	adds	r4, #1
 8002410:	9305      	str	r3, [sp, #20]
 8002412:	4620      	mov	r0, r4
 8002414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002418:	3a30      	subs	r2, #48	; 0x30
 800241a:	2a09      	cmp	r2, #9
 800241c:	d903      	bls.n	8002426 <_vfiprintf_r+0x1ee>
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0c5      	beq.n	80023ae <_vfiprintf_r+0x176>
 8002422:	9105      	str	r1, [sp, #20]
 8002424:	e7c3      	b.n	80023ae <_vfiprintf_r+0x176>
 8002426:	4604      	mov	r4, r0
 8002428:	2301      	movs	r3, #1
 800242a:	fb0c 2101 	mla	r1, ip, r1, r2
 800242e:	e7f0      	b.n	8002412 <_vfiprintf_r+0x1da>
 8002430:	ab03      	add	r3, sp, #12
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	462a      	mov	r2, r5
 8002436:	4630      	mov	r0, r6
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <_vfiprintf_r+0x25c>)
 800243a:	a904      	add	r1, sp, #16
 800243c:	f3af 8000 	nop.w
 8002440:	4607      	mov	r7, r0
 8002442:	1c78      	adds	r0, r7, #1
 8002444:	d1d6      	bne.n	80023f4 <_vfiprintf_r+0x1bc>
 8002446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002448:	07d9      	lsls	r1, r3, #31
 800244a:	d405      	bmi.n	8002458 <_vfiprintf_r+0x220>
 800244c:	89ab      	ldrh	r3, [r5, #12]
 800244e:	059a      	lsls	r2, r3, #22
 8002450:	d402      	bmi.n	8002458 <_vfiprintf_r+0x220>
 8002452:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002454:	f7ff fd85 	bl	8001f62 <__retarget_lock_release_recursive>
 8002458:	89ab      	ldrh	r3, [r5, #12]
 800245a:	065b      	lsls	r3, r3, #25
 800245c:	f53f af12 	bmi.w	8002284 <_vfiprintf_r+0x4c>
 8002460:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002462:	e711      	b.n	8002288 <_vfiprintf_r+0x50>
 8002464:	ab03      	add	r3, sp, #12
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	462a      	mov	r2, r5
 800246a:	4630      	mov	r0, r6
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <_vfiprintf_r+0x25c>)
 800246e:	a904      	add	r1, sp, #16
 8002470:	f000 f882 	bl	8002578 <_printf_i>
 8002474:	e7e4      	b.n	8002440 <_vfiprintf_r+0x208>
 8002476:	bf00      	nop
 8002478:	08002a10 	.word	0x08002a10
 800247c:	08002a30 	.word	0x08002a30
 8002480:	080029f0 	.word	0x080029f0
 8002484:	08002a50 	.word	0x08002a50
 8002488:	08002a56 	.word	0x08002a56
 800248c:	08002a5a 	.word	0x08002a5a
 8002490:	00000000 	.word	0x00000000
 8002494:	08002213 	.word	0x08002213

08002498 <_printf_common>:
 8002498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800249c:	4616      	mov	r6, r2
 800249e:	4699      	mov	r9, r3
 80024a0:	688a      	ldr	r2, [r1, #8]
 80024a2:	690b      	ldr	r3, [r1, #16]
 80024a4:	4607      	mov	r7, r0
 80024a6:	4293      	cmp	r3, r2
 80024a8:	bfb8      	it	lt
 80024aa:	4613      	movlt	r3, r2
 80024ac:	6033      	str	r3, [r6, #0]
 80024ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024b2:	460c      	mov	r4, r1
 80024b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024b8:	b10a      	cbz	r2, 80024be <_printf_common+0x26>
 80024ba:	3301      	adds	r3, #1
 80024bc:	6033      	str	r3, [r6, #0]
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	0699      	lsls	r1, r3, #26
 80024c2:	bf42      	ittt	mi
 80024c4:	6833      	ldrmi	r3, [r6, #0]
 80024c6:	3302      	addmi	r3, #2
 80024c8:	6033      	strmi	r3, [r6, #0]
 80024ca:	6825      	ldr	r5, [r4, #0]
 80024cc:	f015 0506 	ands.w	r5, r5, #6
 80024d0:	d106      	bne.n	80024e0 <_printf_common+0x48>
 80024d2:	f104 0a19 	add.w	sl, r4, #25
 80024d6:	68e3      	ldr	r3, [r4, #12]
 80024d8:	6832      	ldr	r2, [r6, #0]
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	42ab      	cmp	r3, r5
 80024de:	dc28      	bgt.n	8002532 <_printf_common+0x9a>
 80024e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80024e4:	1e13      	subs	r3, r2, #0
 80024e6:	6822      	ldr	r2, [r4, #0]
 80024e8:	bf18      	it	ne
 80024ea:	2301      	movne	r3, #1
 80024ec:	0692      	lsls	r2, r2, #26
 80024ee:	d42d      	bmi.n	800254c <_printf_common+0xb4>
 80024f0:	4649      	mov	r1, r9
 80024f2:	4638      	mov	r0, r7
 80024f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024f8:	47c0      	blx	r8
 80024fa:	3001      	adds	r0, #1
 80024fc:	d020      	beq.n	8002540 <_printf_common+0xa8>
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	68e5      	ldr	r5, [r4, #12]
 8002502:	f003 0306 	and.w	r3, r3, #6
 8002506:	2b04      	cmp	r3, #4
 8002508:	bf18      	it	ne
 800250a:	2500      	movne	r5, #0
 800250c:	6832      	ldr	r2, [r6, #0]
 800250e:	f04f 0600 	mov.w	r6, #0
 8002512:	68a3      	ldr	r3, [r4, #8]
 8002514:	bf08      	it	eq
 8002516:	1aad      	subeq	r5, r5, r2
 8002518:	6922      	ldr	r2, [r4, #16]
 800251a:	bf08      	it	eq
 800251c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002520:	4293      	cmp	r3, r2
 8002522:	bfc4      	itt	gt
 8002524:	1a9b      	subgt	r3, r3, r2
 8002526:	18ed      	addgt	r5, r5, r3
 8002528:	341a      	adds	r4, #26
 800252a:	42b5      	cmp	r5, r6
 800252c:	d11a      	bne.n	8002564 <_printf_common+0xcc>
 800252e:	2000      	movs	r0, #0
 8002530:	e008      	b.n	8002544 <_printf_common+0xac>
 8002532:	2301      	movs	r3, #1
 8002534:	4652      	mov	r2, sl
 8002536:	4649      	mov	r1, r9
 8002538:	4638      	mov	r0, r7
 800253a:	47c0      	blx	r8
 800253c:	3001      	adds	r0, #1
 800253e:	d103      	bne.n	8002548 <_printf_common+0xb0>
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002548:	3501      	adds	r5, #1
 800254a:	e7c4      	b.n	80024d6 <_printf_common+0x3e>
 800254c:	2030      	movs	r0, #48	; 0x30
 800254e:	18e1      	adds	r1, r4, r3
 8002550:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800255a:	4422      	add	r2, r4
 800255c:	3302      	adds	r3, #2
 800255e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002562:	e7c5      	b.n	80024f0 <_printf_common+0x58>
 8002564:	2301      	movs	r3, #1
 8002566:	4622      	mov	r2, r4
 8002568:	4649      	mov	r1, r9
 800256a:	4638      	mov	r0, r7
 800256c:	47c0      	blx	r8
 800256e:	3001      	adds	r0, #1
 8002570:	d0e6      	beq.n	8002540 <_printf_common+0xa8>
 8002572:	3601      	adds	r6, #1
 8002574:	e7d9      	b.n	800252a <_printf_common+0x92>
	...

08002578 <_printf_i>:
 8002578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800257c:	7e0f      	ldrb	r7, [r1, #24]
 800257e:	4691      	mov	r9, r2
 8002580:	2f78      	cmp	r7, #120	; 0x78
 8002582:	4680      	mov	r8, r0
 8002584:	460c      	mov	r4, r1
 8002586:	469a      	mov	sl, r3
 8002588:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800258a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800258e:	d807      	bhi.n	80025a0 <_printf_i+0x28>
 8002590:	2f62      	cmp	r7, #98	; 0x62
 8002592:	d80a      	bhi.n	80025aa <_printf_i+0x32>
 8002594:	2f00      	cmp	r7, #0
 8002596:	f000 80d9 	beq.w	800274c <_printf_i+0x1d4>
 800259a:	2f58      	cmp	r7, #88	; 0x58
 800259c:	f000 80a4 	beq.w	80026e8 <_printf_i+0x170>
 80025a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025a8:	e03a      	b.n	8002620 <_printf_i+0xa8>
 80025aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025ae:	2b15      	cmp	r3, #21
 80025b0:	d8f6      	bhi.n	80025a0 <_printf_i+0x28>
 80025b2:	a101      	add	r1, pc, #4	; (adr r1, 80025b8 <_printf_i+0x40>)
 80025b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025b8:	08002611 	.word	0x08002611
 80025bc:	08002625 	.word	0x08002625
 80025c0:	080025a1 	.word	0x080025a1
 80025c4:	080025a1 	.word	0x080025a1
 80025c8:	080025a1 	.word	0x080025a1
 80025cc:	080025a1 	.word	0x080025a1
 80025d0:	08002625 	.word	0x08002625
 80025d4:	080025a1 	.word	0x080025a1
 80025d8:	080025a1 	.word	0x080025a1
 80025dc:	080025a1 	.word	0x080025a1
 80025e0:	080025a1 	.word	0x080025a1
 80025e4:	08002733 	.word	0x08002733
 80025e8:	08002655 	.word	0x08002655
 80025ec:	08002715 	.word	0x08002715
 80025f0:	080025a1 	.word	0x080025a1
 80025f4:	080025a1 	.word	0x080025a1
 80025f8:	08002755 	.word	0x08002755
 80025fc:	080025a1 	.word	0x080025a1
 8002600:	08002655 	.word	0x08002655
 8002604:	080025a1 	.word	0x080025a1
 8002608:	080025a1 	.word	0x080025a1
 800260c:	0800271d 	.word	0x0800271d
 8002610:	682b      	ldr	r3, [r5, #0]
 8002612:	1d1a      	adds	r2, r3, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	602a      	str	r2, [r5, #0]
 8002618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800261c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002620:	2301      	movs	r3, #1
 8002622:	e0a4      	b.n	800276e <_printf_i+0x1f6>
 8002624:	6820      	ldr	r0, [r4, #0]
 8002626:	6829      	ldr	r1, [r5, #0]
 8002628:	0606      	lsls	r6, r0, #24
 800262a:	f101 0304 	add.w	r3, r1, #4
 800262e:	d50a      	bpl.n	8002646 <_printf_i+0xce>
 8002630:	680e      	ldr	r6, [r1, #0]
 8002632:	602b      	str	r3, [r5, #0]
 8002634:	2e00      	cmp	r6, #0
 8002636:	da03      	bge.n	8002640 <_printf_i+0xc8>
 8002638:	232d      	movs	r3, #45	; 0x2d
 800263a:	4276      	negs	r6, r6
 800263c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002640:	230a      	movs	r3, #10
 8002642:	485e      	ldr	r0, [pc, #376]	; (80027bc <_printf_i+0x244>)
 8002644:	e019      	b.n	800267a <_printf_i+0x102>
 8002646:	680e      	ldr	r6, [r1, #0]
 8002648:	f010 0f40 	tst.w	r0, #64	; 0x40
 800264c:	602b      	str	r3, [r5, #0]
 800264e:	bf18      	it	ne
 8002650:	b236      	sxthne	r6, r6
 8002652:	e7ef      	b.n	8002634 <_printf_i+0xbc>
 8002654:	682b      	ldr	r3, [r5, #0]
 8002656:	6820      	ldr	r0, [r4, #0]
 8002658:	1d19      	adds	r1, r3, #4
 800265a:	6029      	str	r1, [r5, #0]
 800265c:	0601      	lsls	r1, r0, #24
 800265e:	d501      	bpl.n	8002664 <_printf_i+0xec>
 8002660:	681e      	ldr	r6, [r3, #0]
 8002662:	e002      	b.n	800266a <_printf_i+0xf2>
 8002664:	0646      	lsls	r6, r0, #25
 8002666:	d5fb      	bpl.n	8002660 <_printf_i+0xe8>
 8002668:	881e      	ldrh	r6, [r3, #0]
 800266a:	2f6f      	cmp	r7, #111	; 0x6f
 800266c:	bf0c      	ite	eq
 800266e:	2308      	moveq	r3, #8
 8002670:	230a      	movne	r3, #10
 8002672:	4852      	ldr	r0, [pc, #328]	; (80027bc <_printf_i+0x244>)
 8002674:	2100      	movs	r1, #0
 8002676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800267a:	6865      	ldr	r5, [r4, #4]
 800267c:	2d00      	cmp	r5, #0
 800267e:	bfa8      	it	ge
 8002680:	6821      	ldrge	r1, [r4, #0]
 8002682:	60a5      	str	r5, [r4, #8]
 8002684:	bfa4      	itt	ge
 8002686:	f021 0104 	bicge.w	r1, r1, #4
 800268a:	6021      	strge	r1, [r4, #0]
 800268c:	b90e      	cbnz	r6, 8002692 <_printf_i+0x11a>
 800268e:	2d00      	cmp	r5, #0
 8002690:	d04d      	beq.n	800272e <_printf_i+0x1b6>
 8002692:	4615      	mov	r5, r2
 8002694:	fbb6 f1f3 	udiv	r1, r6, r3
 8002698:	fb03 6711 	mls	r7, r3, r1, r6
 800269c:	5dc7      	ldrb	r7, [r0, r7]
 800269e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80026a2:	4637      	mov	r7, r6
 80026a4:	42bb      	cmp	r3, r7
 80026a6:	460e      	mov	r6, r1
 80026a8:	d9f4      	bls.n	8002694 <_printf_i+0x11c>
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d10b      	bne.n	80026c6 <_printf_i+0x14e>
 80026ae:	6823      	ldr	r3, [r4, #0]
 80026b0:	07de      	lsls	r6, r3, #31
 80026b2:	d508      	bpl.n	80026c6 <_printf_i+0x14e>
 80026b4:	6923      	ldr	r3, [r4, #16]
 80026b6:	6861      	ldr	r1, [r4, #4]
 80026b8:	4299      	cmp	r1, r3
 80026ba:	bfde      	ittt	le
 80026bc:	2330      	movle	r3, #48	; 0x30
 80026be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026c6:	1b52      	subs	r2, r2, r5
 80026c8:	6122      	str	r2, [r4, #16]
 80026ca:	464b      	mov	r3, r9
 80026cc:	4621      	mov	r1, r4
 80026ce:	4640      	mov	r0, r8
 80026d0:	f8cd a000 	str.w	sl, [sp]
 80026d4:	aa03      	add	r2, sp, #12
 80026d6:	f7ff fedf 	bl	8002498 <_printf_common>
 80026da:	3001      	adds	r0, #1
 80026dc:	d14c      	bne.n	8002778 <_printf_i+0x200>
 80026de:	f04f 30ff 	mov.w	r0, #4294967295
 80026e2:	b004      	add	sp, #16
 80026e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026e8:	4834      	ldr	r0, [pc, #208]	; (80027bc <_printf_i+0x244>)
 80026ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80026ee:	6829      	ldr	r1, [r5, #0]
 80026f0:	6823      	ldr	r3, [r4, #0]
 80026f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80026f6:	6029      	str	r1, [r5, #0]
 80026f8:	061d      	lsls	r5, r3, #24
 80026fa:	d514      	bpl.n	8002726 <_printf_i+0x1ae>
 80026fc:	07df      	lsls	r7, r3, #31
 80026fe:	bf44      	itt	mi
 8002700:	f043 0320 	orrmi.w	r3, r3, #32
 8002704:	6023      	strmi	r3, [r4, #0]
 8002706:	b91e      	cbnz	r6, 8002710 <_printf_i+0x198>
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	f023 0320 	bic.w	r3, r3, #32
 800270e:	6023      	str	r3, [r4, #0]
 8002710:	2310      	movs	r3, #16
 8002712:	e7af      	b.n	8002674 <_printf_i+0xfc>
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	f043 0320 	orr.w	r3, r3, #32
 800271a:	6023      	str	r3, [r4, #0]
 800271c:	2378      	movs	r3, #120	; 0x78
 800271e:	4828      	ldr	r0, [pc, #160]	; (80027c0 <_printf_i+0x248>)
 8002720:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002724:	e7e3      	b.n	80026ee <_printf_i+0x176>
 8002726:	0659      	lsls	r1, r3, #25
 8002728:	bf48      	it	mi
 800272a:	b2b6      	uxthmi	r6, r6
 800272c:	e7e6      	b.n	80026fc <_printf_i+0x184>
 800272e:	4615      	mov	r5, r2
 8002730:	e7bb      	b.n	80026aa <_printf_i+0x132>
 8002732:	682b      	ldr	r3, [r5, #0]
 8002734:	6826      	ldr	r6, [r4, #0]
 8002736:	1d18      	adds	r0, r3, #4
 8002738:	6961      	ldr	r1, [r4, #20]
 800273a:	6028      	str	r0, [r5, #0]
 800273c:	0635      	lsls	r5, r6, #24
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	d501      	bpl.n	8002746 <_printf_i+0x1ce>
 8002742:	6019      	str	r1, [r3, #0]
 8002744:	e002      	b.n	800274c <_printf_i+0x1d4>
 8002746:	0670      	lsls	r0, r6, #25
 8002748:	d5fb      	bpl.n	8002742 <_printf_i+0x1ca>
 800274a:	8019      	strh	r1, [r3, #0]
 800274c:	2300      	movs	r3, #0
 800274e:	4615      	mov	r5, r2
 8002750:	6123      	str	r3, [r4, #16]
 8002752:	e7ba      	b.n	80026ca <_printf_i+0x152>
 8002754:	682b      	ldr	r3, [r5, #0]
 8002756:	2100      	movs	r1, #0
 8002758:	1d1a      	adds	r2, r3, #4
 800275a:	602a      	str	r2, [r5, #0]
 800275c:	681d      	ldr	r5, [r3, #0]
 800275e:	6862      	ldr	r2, [r4, #4]
 8002760:	4628      	mov	r0, r5
 8002762:	f000 f8d9 	bl	8002918 <memchr>
 8002766:	b108      	cbz	r0, 800276c <_printf_i+0x1f4>
 8002768:	1b40      	subs	r0, r0, r5
 800276a:	6060      	str	r0, [r4, #4]
 800276c:	6863      	ldr	r3, [r4, #4]
 800276e:	6123      	str	r3, [r4, #16]
 8002770:	2300      	movs	r3, #0
 8002772:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002776:	e7a8      	b.n	80026ca <_printf_i+0x152>
 8002778:	462a      	mov	r2, r5
 800277a:	4649      	mov	r1, r9
 800277c:	4640      	mov	r0, r8
 800277e:	6923      	ldr	r3, [r4, #16]
 8002780:	47d0      	blx	sl
 8002782:	3001      	adds	r0, #1
 8002784:	d0ab      	beq.n	80026de <_printf_i+0x166>
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	079b      	lsls	r3, r3, #30
 800278a:	d413      	bmi.n	80027b4 <_printf_i+0x23c>
 800278c:	68e0      	ldr	r0, [r4, #12]
 800278e:	9b03      	ldr	r3, [sp, #12]
 8002790:	4298      	cmp	r0, r3
 8002792:	bfb8      	it	lt
 8002794:	4618      	movlt	r0, r3
 8002796:	e7a4      	b.n	80026e2 <_printf_i+0x16a>
 8002798:	2301      	movs	r3, #1
 800279a:	4632      	mov	r2, r6
 800279c:	4649      	mov	r1, r9
 800279e:	4640      	mov	r0, r8
 80027a0:	47d0      	blx	sl
 80027a2:	3001      	adds	r0, #1
 80027a4:	d09b      	beq.n	80026de <_printf_i+0x166>
 80027a6:	3501      	adds	r5, #1
 80027a8:	68e3      	ldr	r3, [r4, #12]
 80027aa:	9903      	ldr	r1, [sp, #12]
 80027ac:	1a5b      	subs	r3, r3, r1
 80027ae:	42ab      	cmp	r3, r5
 80027b0:	dcf2      	bgt.n	8002798 <_printf_i+0x220>
 80027b2:	e7eb      	b.n	800278c <_printf_i+0x214>
 80027b4:	2500      	movs	r5, #0
 80027b6:	f104 0619 	add.w	r6, r4, #25
 80027ba:	e7f5      	b.n	80027a8 <_printf_i+0x230>
 80027bc:	08002a61 	.word	0x08002a61
 80027c0:	08002a72 	.word	0x08002a72

080027c4 <_sbrk_r>:
 80027c4:	b538      	push	{r3, r4, r5, lr}
 80027c6:	2300      	movs	r3, #0
 80027c8:	4d05      	ldr	r5, [pc, #20]	; (80027e0 <_sbrk_r+0x1c>)
 80027ca:	4604      	mov	r4, r0
 80027cc:	4608      	mov	r0, r1
 80027ce:	602b      	str	r3, [r5, #0]
 80027d0:	f7fd ff2e 	bl	8000630 <_sbrk>
 80027d4:	1c43      	adds	r3, r0, #1
 80027d6:	d102      	bne.n	80027de <_sbrk_r+0x1a>
 80027d8:	682b      	ldr	r3, [r5, #0]
 80027da:	b103      	cbz	r3, 80027de <_sbrk_r+0x1a>
 80027dc:	6023      	str	r3, [r4, #0]
 80027de:	bd38      	pop	{r3, r4, r5, pc}
 80027e0:	200000e8 	.word	0x200000e8

080027e4 <__sread>:
 80027e4:	b510      	push	{r4, lr}
 80027e6:	460c      	mov	r4, r1
 80027e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ec:	f000 f8ae 	bl	800294c <_read_r>
 80027f0:	2800      	cmp	r0, #0
 80027f2:	bfab      	itete	ge
 80027f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027f6:	89a3      	ldrhlt	r3, [r4, #12]
 80027f8:	181b      	addge	r3, r3, r0
 80027fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027fe:	bfac      	ite	ge
 8002800:	6563      	strge	r3, [r4, #84]	; 0x54
 8002802:	81a3      	strhlt	r3, [r4, #12]
 8002804:	bd10      	pop	{r4, pc}

08002806 <__swrite>:
 8002806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800280a:	461f      	mov	r7, r3
 800280c:	898b      	ldrh	r3, [r1, #12]
 800280e:	4605      	mov	r5, r0
 8002810:	05db      	lsls	r3, r3, #23
 8002812:	460c      	mov	r4, r1
 8002814:	4616      	mov	r6, r2
 8002816:	d505      	bpl.n	8002824 <__swrite+0x1e>
 8002818:	2302      	movs	r3, #2
 800281a:	2200      	movs	r2, #0
 800281c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002820:	f000 f868 	bl	80028f4 <_lseek_r>
 8002824:	89a3      	ldrh	r3, [r4, #12]
 8002826:	4632      	mov	r2, r6
 8002828:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800282c:	81a3      	strh	r3, [r4, #12]
 800282e:	4628      	mov	r0, r5
 8002830:	463b      	mov	r3, r7
 8002832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800283a:	f000 b817 	b.w	800286c <_write_r>

0800283e <__sseek>:
 800283e:	b510      	push	{r4, lr}
 8002840:	460c      	mov	r4, r1
 8002842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002846:	f000 f855 	bl	80028f4 <_lseek_r>
 800284a:	1c43      	adds	r3, r0, #1
 800284c:	89a3      	ldrh	r3, [r4, #12]
 800284e:	bf15      	itete	ne
 8002850:	6560      	strne	r0, [r4, #84]	; 0x54
 8002852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800285a:	81a3      	strheq	r3, [r4, #12]
 800285c:	bf18      	it	ne
 800285e:	81a3      	strhne	r3, [r4, #12]
 8002860:	bd10      	pop	{r4, pc}

08002862 <__sclose>:
 8002862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002866:	f000 b813 	b.w	8002890 <_close_r>
	...

0800286c <_write_r>:
 800286c:	b538      	push	{r3, r4, r5, lr}
 800286e:	4604      	mov	r4, r0
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	2200      	movs	r2, #0
 8002876:	4d05      	ldr	r5, [pc, #20]	; (800288c <_write_r+0x20>)
 8002878:	602a      	str	r2, [r5, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	f7fd fe8c 	bl	8000598 <_write>
 8002880:	1c43      	adds	r3, r0, #1
 8002882:	d102      	bne.n	800288a <_write_r+0x1e>
 8002884:	682b      	ldr	r3, [r5, #0]
 8002886:	b103      	cbz	r3, 800288a <_write_r+0x1e>
 8002888:	6023      	str	r3, [r4, #0]
 800288a:	bd38      	pop	{r3, r4, r5, pc}
 800288c:	200000e8 	.word	0x200000e8

08002890 <_close_r>:
 8002890:	b538      	push	{r3, r4, r5, lr}
 8002892:	2300      	movs	r3, #0
 8002894:	4d05      	ldr	r5, [pc, #20]	; (80028ac <_close_r+0x1c>)
 8002896:	4604      	mov	r4, r0
 8002898:	4608      	mov	r0, r1
 800289a:	602b      	str	r3, [r5, #0]
 800289c:	f7fd fe98 	bl	80005d0 <_close>
 80028a0:	1c43      	adds	r3, r0, #1
 80028a2:	d102      	bne.n	80028aa <_close_r+0x1a>
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	b103      	cbz	r3, 80028aa <_close_r+0x1a>
 80028a8:	6023      	str	r3, [r4, #0]
 80028aa:	bd38      	pop	{r3, r4, r5, pc}
 80028ac:	200000e8 	.word	0x200000e8

080028b0 <_fstat_r>:
 80028b0:	b538      	push	{r3, r4, r5, lr}
 80028b2:	2300      	movs	r3, #0
 80028b4:	4d06      	ldr	r5, [pc, #24]	; (80028d0 <_fstat_r+0x20>)
 80028b6:	4604      	mov	r4, r0
 80028b8:	4608      	mov	r0, r1
 80028ba:	4611      	mov	r1, r2
 80028bc:	602b      	str	r3, [r5, #0]
 80028be:	f7fd fe92 	bl	80005e6 <_fstat>
 80028c2:	1c43      	adds	r3, r0, #1
 80028c4:	d102      	bne.n	80028cc <_fstat_r+0x1c>
 80028c6:	682b      	ldr	r3, [r5, #0]
 80028c8:	b103      	cbz	r3, 80028cc <_fstat_r+0x1c>
 80028ca:	6023      	str	r3, [r4, #0]
 80028cc:	bd38      	pop	{r3, r4, r5, pc}
 80028ce:	bf00      	nop
 80028d0:	200000e8 	.word	0x200000e8

080028d4 <_isatty_r>:
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	2300      	movs	r3, #0
 80028d8:	4d05      	ldr	r5, [pc, #20]	; (80028f0 <_isatty_r+0x1c>)
 80028da:	4604      	mov	r4, r0
 80028dc:	4608      	mov	r0, r1
 80028de:	602b      	str	r3, [r5, #0]
 80028e0:	f7fd fe90 	bl	8000604 <_isatty>
 80028e4:	1c43      	adds	r3, r0, #1
 80028e6:	d102      	bne.n	80028ee <_isatty_r+0x1a>
 80028e8:	682b      	ldr	r3, [r5, #0]
 80028ea:	b103      	cbz	r3, 80028ee <_isatty_r+0x1a>
 80028ec:	6023      	str	r3, [r4, #0]
 80028ee:	bd38      	pop	{r3, r4, r5, pc}
 80028f0:	200000e8 	.word	0x200000e8

080028f4 <_lseek_r>:
 80028f4:	b538      	push	{r3, r4, r5, lr}
 80028f6:	4604      	mov	r4, r0
 80028f8:	4608      	mov	r0, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	2200      	movs	r2, #0
 80028fe:	4d05      	ldr	r5, [pc, #20]	; (8002914 <_lseek_r+0x20>)
 8002900:	602a      	str	r2, [r5, #0]
 8002902:	461a      	mov	r2, r3
 8002904:	f7fd fe88 	bl	8000618 <_lseek>
 8002908:	1c43      	adds	r3, r0, #1
 800290a:	d102      	bne.n	8002912 <_lseek_r+0x1e>
 800290c:	682b      	ldr	r3, [r5, #0]
 800290e:	b103      	cbz	r3, 8002912 <_lseek_r+0x1e>
 8002910:	6023      	str	r3, [r4, #0]
 8002912:	bd38      	pop	{r3, r4, r5, pc}
 8002914:	200000e8 	.word	0x200000e8

08002918 <memchr>:
 8002918:	4603      	mov	r3, r0
 800291a:	b510      	push	{r4, lr}
 800291c:	b2c9      	uxtb	r1, r1
 800291e:	4402      	add	r2, r0
 8002920:	4293      	cmp	r3, r2
 8002922:	4618      	mov	r0, r3
 8002924:	d101      	bne.n	800292a <memchr+0x12>
 8002926:	2000      	movs	r0, #0
 8002928:	e003      	b.n	8002932 <memchr+0x1a>
 800292a:	7804      	ldrb	r4, [r0, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	428c      	cmp	r4, r1
 8002930:	d1f6      	bne.n	8002920 <memchr+0x8>
 8002932:	bd10      	pop	{r4, pc}

08002934 <__malloc_lock>:
 8002934:	4801      	ldr	r0, [pc, #4]	; (800293c <__malloc_lock+0x8>)
 8002936:	f7ff bb13 	b.w	8001f60 <__retarget_lock_acquire_recursive>
 800293a:	bf00      	nop
 800293c:	200000dc 	.word	0x200000dc

08002940 <__malloc_unlock>:
 8002940:	4801      	ldr	r0, [pc, #4]	; (8002948 <__malloc_unlock+0x8>)
 8002942:	f7ff bb0e 	b.w	8001f62 <__retarget_lock_release_recursive>
 8002946:	bf00      	nop
 8002948:	200000dc 	.word	0x200000dc

0800294c <_read_r>:
 800294c:	b538      	push	{r3, r4, r5, lr}
 800294e:	4604      	mov	r4, r0
 8002950:	4608      	mov	r0, r1
 8002952:	4611      	mov	r1, r2
 8002954:	2200      	movs	r2, #0
 8002956:	4d05      	ldr	r5, [pc, #20]	; (800296c <_read_r+0x20>)
 8002958:	602a      	str	r2, [r5, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	f7fd fdff 	bl	800055e <_read>
 8002960:	1c43      	adds	r3, r0, #1
 8002962:	d102      	bne.n	800296a <_read_r+0x1e>
 8002964:	682b      	ldr	r3, [r5, #0]
 8002966:	b103      	cbz	r3, 800296a <_read_r+0x1e>
 8002968:	6023      	str	r3, [r4, #0]
 800296a:	bd38      	pop	{r3, r4, r5, pc}
 800296c:	200000e8 	.word	0x200000e8

08002970 <_init>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr

0800297c <_fini>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	bf00      	nop
 8002980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002982:	bc08      	pop	{r3}
 8002984:	469e      	mov	lr, r3
 8002986:	4770      	bx	lr
